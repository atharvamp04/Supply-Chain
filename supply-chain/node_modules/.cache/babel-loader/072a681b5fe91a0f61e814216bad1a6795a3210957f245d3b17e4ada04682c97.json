{"ast":null,"code":"/**\r\n *  Some data helpers.\r\n *\r\n *\r\n *  @_subsection api/utils:Data Helpers  [about-data]\r\n */\nimport { assert, assertArgument } from \"./errors.js\";\nfunction _getBytes(value, name, copy) {\n  if (value instanceof Uint8Array) {\n    if (copy) {\n      return new Uint8Array(value);\n    }\n    return value;\n  }\n  if (typeof value === \"string\" && value.match(/^0x(?:[0-9a-f][0-9a-f])*$/i)) {\n    const result = new Uint8Array((value.length - 2) / 2);\n    let offset = 2;\n    for (let i = 0; i < result.length; i++) {\n      result[i] = parseInt(value.substring(offset, offset + 2), 16);\n      offset += 2;\n    }\n    return result;\n  }\n  assertArgument(false, \"invalid BytesLike value\", name || \"value\", value);\n}\n/**\r\n *  Get a typed Uint8Array for %%value%%. If already a Uint8Array\r\n *  the original %%value%% is returned; if a copy is required use\r\n *  [[getBytesCopy]].\r\n *\r\n *  @see: getBytesCopy\r\n */\nexport function getBytes(value, name) {\n  return _getBytes(value, name, false);\n}\n/**\r\n *  Get a typed Uint8Array for %%value%%, creating a copy if necessary\r\n *  to prevent any modifications of the returned value from being\r\n *  reflected elsewhere.\r\n *\r\n *  @see: getBytes\r\n */\nexport function getBytesCopy(value, name) {\n  return _getBytes(value, name, true);\n}\n/**\r\n *  Returns true if %%value%% is a valid [[HexString]].\r\n *\r\n *  If %%length%% is ``true`` or a //number//, it also checks that\r\n *  %%value%% is a valid [[DataHexString]] of %%length%% (if a //number//)\r\n *  bytes of data (e.g. ``0x1234`` is 2 bytes).\r\n */\nexport function isHexString(value, length) {\n  if (typeof value !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n    return false;\n  }\n  if (typeof length === \"number\" && value.length !== 2 + 2 * length) {\n    return false;\n  }\n  if (length === true && value.length % 2 !== 0) {\n    return false;\n  }\n  return true;\n}\n/**\r\n *  Returns true if %%value%% is a valid representation of arbitrary\r\n *  data (i.e. a valid [[DataHexString]] or a Uint8Array).\r\n */\nexport function isBytesLike(value) {\n  return isHexString(value, true) || value instanceof Uint8Array;\n}\nconst HexCharacters = \"0123456789abcdef\";\n/**\r\n *  Returns a [[DataHexString]] representation of %%data%%.\r\n */\nexport function hexlify(data) {\n  const bytes = getBytes(data);\n  let result = \"0x\";\n  for (let i = 0; i < bytes.length; i++) {\n    const v = bytes[i];\n    result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n  }\n  return result;\n}\n/**\r\n *  Returns a [[DataHexString]] by concatenating all values\r\n *  within %%data%%.\r\n */\nexport function concat(datas) {\n  return \"0x\" + datas.map(d => hexlify(d).substring(2)).join(\"\");\n}\n/**\r\n *  Returns the length of %%data%%, in bytes.\r\n */\nexport function dataLength(data) {\n  if (isHexString(data, true)) {\n    return (data.length - 2) / 2;\n  }\n  return getBytes(data).length;\n}\n/**\r\n *  Returns a [[DataHexString]] by slicing %%data%% from the %%start%%\r\n *  offset to the %%end%% offset.\r\n *\r\n *  By default %%start%% is 0 and %%end%% is the length of %%data%%.\r\n */\nexport function dataSlice(data, start, end) {\n  const bytes = getBytes(data);\n  if (end != null && end > bytes.length) {\n    assert(false, \"cannot slice beyond data bounds\", \"BUFFER_OVERRUN\", {\n      buffer: bytes,\n      length: bytes.length,\n      offset: end\n    });\n  }\n  return hexlify(bytes.slice(start == null ? 0 : start, end == null ? bytes.length : end));\n}\n/**\r\n *  Return the [[DataHexString]] result by stripping all **leading**\r\n ** zero bytes from %%data%%.\r\n */\nexport function stripZerosLeft(data) {\n  let bytes = hexlify(data).substring(2);\n  while (bytes.startsWith(\"00\")) {\n    bytes = bytes.substring(2);\n  }\n  return \"0x\" + bytes;\n}\nfunction zeroPad(data, length, left) {\n  const bytes = getBytes(data);\n  assert(length >= bytes.length, \"padding exceeds data length\", \"BUFFER_OVERRUN\", {\n    buffer: new Uint8Array(bytes),\n    length: length,\n    offset: length + 1\n  });\n  const result = new Uint8Array(length);\n  result.fill(0);\n  if (left) {\n    result.set(bytes, length - bytes.length);\n  } else {\n    result.set(bytes, 0);\n  }\n  return hexlify(result);\n}\n/**\r\n *  Return the [[DataHexString]] of %%data%% padded on the **left**\r\n *  to %%length%% bytes.\r\n *\r\n *  If %%data%% already exceeds %%length%%, a [[BufferOverrunError]] is\r\n *  thrown.\r\n *\r\n *  This pads data the same as **values** are in Solidity\r\n *  (e.g. ``uint128``).\r\n */\nexport function zeroPadValue(data, length) {\n  return zeroPad(data, length, true);\n}\n/**\r\n *  Return the [[DataHexString]] of %%data%% padded on the **right**\r\n *  to %%length%% bytes.\r\n *\r\n *  If %%data%% already exceeds %%length%%, a [[BufferOverrunError]] is\r\n *  thrown.\r\n *\r\n *  This pads data the same as **bytes** are in Solidity\r\n *  (e.g. ``bytes16``).\r\n */\nexport function zeroPadBytes(data, length) {\n  return zeroPad(data, length, false);\n}","map":{"version":3,"names":["assert","assertArgument","_getBytes","value","name","copy","Uint8Array","match","result","length","offset","i","parseInt","substring","getBytes","getBytesCopy","isHexString","isBytesLike","HexCharacters","hexlify","data","bytes","v","concat","datas","map","d","join","dataLength","dataSlice","start","end","buffer","slice","stripZerosLeft","startsWith","zeroPad","left","fill","set","zeroPadValue","zeroPadBytes"],"sources":["C:\\Users\\patil\\OneDrive\\Desktop\\Hack4Good\\Supply-Chain\\supply-chain\\node_modules\\ethers\\src.ts\\utils\\data.ts"],"sourcesContent":["/**\r\n *  Some data helpers.\r\n *\r\n *\r\n *  @_subsection api/utils:Data Helpers  [about-data]\r\n */\r\nimport { assert, assertArgument } from \"./errors.js\";\r\n\r\n/**\r\n *  A [[HexString]] whose length is even, which ensures it is a valid\r\n *  representation of binary data.\r\n */\r\nexport type DataHexString = string;\r\n\r\n/**\r\n *  A string which is prefixed with ``0x`` and followed by any number\r\n *  of case-agnostic hexadecimal characters.\r\n *\r\n *  It must match the regular expression ``/0x[0-9A-Fa-f]*\\/``.\r\n */\r\nexport type HexString = string;\r\n\r\n/**\r\n *  An object that can be used to represent binary data.\r\n */\r\nexport type BytesLike = DataHexString | Uint8Array;\r\n\r\nfunction _getBytes(value: BytesLike, name?: string, copy?: boolean): Uint8Array {\r\n    if (value instanceof Uint8Array) {\r\n        if (copy) { return new Uint8Array(value); }\r\n        return value;\r\n    }\r\n\r\n    if (typeof(value) === \"string\" && value.match(/^0x(?:[0-9a-f][0-9a-f])*$/i)) {\r\n        const result = new Uint8Array((value.length - 2) / 2);\r\n        let offset = 2;\r\n        for (let i = 0; i < result.length; i++) {\r\n            result[i] = parseInt(value.substring(offset, offset + 2), 16);\r\n            offset += 2;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    assertArgument(false, \"invalid BytesLike value\", name || \"value\", value);\r\n}\r\n\r\n/**\r\n *  Get a typed Uint8Array for %%value%%. If already a Uint8Array\r\n *  the original %%value%% is returned; if a copy is required use\r\n *  [[getBytesCopy]].\r\n *\r\n *  @see: getBytesCopy\r\n */\r\nexport function getBytes(value: BytesLike, name?: string): Uint8Array {\r\n    return _getBytes(value, name, false);\r\n}\r\n\r\n/**\r\n *  Get a typed Uint8Array for %%value%%, creating a copy if necessary\r\n *  to prevent any modifications of the returned value from being\r\n *  reflected elsewhere.\r\n *\r\n *  @see: getBytes\r\n */\r\nexport function getBytesCopy(value: BytesLike, name?: string): Uint8Array {\r\n    return _getBytes(value, name, true);\r\n}\r\n\r\n\r\n/**\r\n *  Returns true if %%value%% is a valid [[HexString]].\r\n *\r\n *  If %%length%% is ``true`` or a //number//, it also checks that\r\n *  %%value%% is a valid [[DataHexString]] of %%length%% (if a //number//)\r\n *  bytes of data (e.g. ``0x1234`` is 2 bytes).\r\n */\r\nexport function isHexString(value: any, length?: number | boolean): value is `0x${ string }` {\r\n    if (typeof(value) !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\r\n        return false\r\n    }\r\n\r\n    if (typeof(length) === \"number\" && value.length !== 2 + 2 * length) { return false; }\r\n    if (length === true && (value.length % 2) !== 0) { return false; }\r\n\r\n    return true;\r\n}\r\n\r\n/**\r\n *  Returns true if %%value%% is a valid representation of arbitrary\r\n *  data (i.e. a valid [[DataHexString]] or a Uint8Array).\r\n */\r\nexport function isBytesLike(value: any): value is BytesLike {\r\n    return (isHexString(value, true) || (value instanceof Uint8Array));\r\n}\r\n\r\nconst HexCharacters: string = \"0123456789abcdef\";\r\n\r\n/**\r\n *  Returns a [[DataHexString]] representation of %%data%%.\r\n */\r\nexport function hexlify(data: BytesLike): string {\r\n    const bytes = getBytes(data);\r\n\r\n    let result = \"0x\";\r\n    for (let i = 0; i < bytes.length; i++) {\r\n        const v = bytes[i];\r\n        result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n *  Returns a [[DataHexString]] by concatenating all values\r\n *  within %%data%%.\r\n */\r\nexport function concat(datas: ReadonlyArray<BytesLike>): string {\r\n    return \"0x\" + datas.map((d) => hexlify(d).substring(2)).join(\"\");\r\n}\r\n\r\n/**\r\n *  Returns the length of %%data%%, in bytes.\r\n */\r\nexport function dataLength(data: BytesLike): number {\r\n    if (isHexString(data, true)) { return (data.length - 2) / 2; }\r\n    return getBytes(data).length;\r\n}\r\n\r\n/**\r\n *  Returns a [[DataHexString]] by slicing %%data%% from the %%start%%\r\n *  offset to the %%end%% offset.\r\n *\r\n *  By default %%start%% is 0 and %%end%% is the length of %%data%%.\r\n */\r\nexport function dataSlice(data: BytesLike, start?: number, end?: number): string {\r\n    const bytes = getBytes(data);\r\n    if (end != null && end > bytes.length) {\r\n        assert(false, \"cannot slice beyond data bounds\", \"BUFFER_OVERRUN\", {\r\n            buffer: bytes, length: bytes.length, offset: end\r\n        });\r\n    }\r\n    return hexlify(bytes.slice((start == null) ? 0: start, (end == null) ? bytes.length: end));\r\n}\r\n\r\n/**\r\n *  Return the [[DataHexString]] result by stripping all **leading**\r\n ** zero bytes from %%data%%.\r\n */\r\nexport function stripZerosLeft(data: BytesLike): string {\r\n    let bytes = hexlify(data).substring(2);\r\n    while (bytes.startsWith(\"00\")) { bytes = bytes.substring(2); }\r\n    return \"0x\" + bytes;\r\n}\r\n\r\nfunction zeroPad(data: BytesLike, length: number, left: boolean): string {\r\n    const bytes = getBytes(data);\r\n    assert(length >= bytes.length, \"padding exceeds data length\", \"BUFFER_OVERRUN\", {\r\n        buffer: new Uint8Array(bytes),\r\n        length: length,\r\n        offset: length + 1\r\n    });\r\n\r\n    const result = new Uint8Array(length);\r\n    result.fill(0);\r\n    if (left) {\r\n        result.set(bytes, length - bytes.length);\r\n    } else {\r\n        result.set(bytes, 0);\r\n    }\r\n\r\n    return hexlify(result);\r\n}\r\n\r\n/**\r\n *  Return the [[DataHexString]] of %%data%% padded on the **left**\r\n *  to %%length%% bytes.\r\n *\r\n *  If %%data%% already exceeds %%length%%, a [[BufferOverrunError]] is\r\n *  thrown.\r\n *\r\n *  This pads data the same as **values** are in Solidity\r\n *  (e.g. ``uint128``).\r\n */\r\nexport function zeroPadValue(data: BytesLike, length: number): string {\r\n    return zeroPad(data, length, true);\r\n}\r\n\r\n/**\r\n *  Return the [[DataHexString]] of %%data%% padded on the **right**\r\n *  to %%length%% bytes.\r\n *\r\n *  If %%data%% already exceeds %%length%%, a [[BufferOverrunError]] is\r\n *  thrown.\r\n *\r\n *  This pads data the same as **bytes** are in Solidity\r\n *  (e.g. ``bytes16``).\r\n */\r\nexport function zeroPadBytes(data: BytesLike, length: number): string {\r\n    return zeroPad(data, length, false);\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}