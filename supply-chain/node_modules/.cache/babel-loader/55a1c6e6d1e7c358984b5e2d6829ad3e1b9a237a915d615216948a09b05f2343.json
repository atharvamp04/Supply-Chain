{"ast":null,"code":"/**\r\n *  [[link-pocket]] provides a third-party service for connecting to\r\n *  various blockchains over JSON-RPC.\r\n *\r\n *  **Supported Networks**\r\n *\r\n *  - Ethereum Mainnet (``mainnet``)\r\n *  - Goerli Testnet (``goerli``)\r\n *  - Polygon (``matic``)\r\n *  - Arbitrum (``arbitrum``)\r\n *\r\n *  @_subsection: api/providers/thirdparty:Pocket  [providers-pocket]\r\n */\nimport { defineProperties, FetchRequest, assertArgument } from \"../utils/index.js\";\nimport { showThrottleMessage } from \"./community.js\";\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\nconst defaultApplicationId = \"62e1ad51b37b8e00394bda3b\";\nfunction getHost(name) {\n  switch (name) {\n    case \"mainnet\":\n      return \"eth-mainnet.gateway.pokt.network\";\n    case \"goerli\":\n      return \"eth-goerli.gateway.pokt.network\";\n    case \"matic\":\n      return \"poly-mainnet.gateway.pokt.network\";\n    case \"matic-mumbai\":\n      return \"polygon-mumbai-rpc.gateway.pokt.network\";\n  }\n  assertArgument(false, \"unsupported network\", \"network\", name);\n}\n/**\r\n *  The **PocketProvider** connects to the [[link-pocket]]\r\n *  JSON-RPC end-points.\r\n *\r\n *  By default, a highly-throttled API key is used, which is\r\n *  appropriate for quick prototypes and simple scripts. To\r\n *  gain access to an increased rate-limit, it is highly\r\n *  recommended to [sign up here](link-pocket-signup).\r\n */\nexport class PocketProvider extends JsonRpcProvider {\n  /**\r\n   *  The Application ID for the Pocket connection.\r\n   */\n  applicationId;\n  /**\r\n   *  The Application Secret for making authenticated requests\r\n   *  to the Pocket connection.\r\n   */\n  applicationSecret;\n  /**\r\n   *  Create a new **PocketProvider**.\r\n   *\r\n   *  By default connecting to ``mainnet`` with a highly throttled\r\n   *  API key.\r\n   */\n  constructor(_network, applicationId, applicationSecret) {\n    if (_network == null) {\n      _network = \"mainnet\";\n    }\n    const network = Network.from(_network);\n    if (applicationId == null) {\n      applicationId = defaultApplicationId;\n    }\n    if (applicationSecret == null) {\n      applicationSecret = null;\n    }\n    const options = {\n      staticNetwork: network\n    };\n    const request = PocketProvider.getRequest(network, applicationId, applicationSecret);\n    super(request, network, options);\n    defineProperties(this, {\n      applicationId,\n      applicationSecret\n    });\n  }\n  _getProvider(chainId) {\n    try {\n      return new PocketProvider(chainId, this.applicationId, this.applicationSecret);\n    } catch (error) {}\n    return super._getProvider(chainId);\n  }\n  /**\r\n   *  Returns a prepared request for connecting to %%network%% with\r\n   *  %%applicationId%%.\r\n   */\n  static getRequest(network, applicationId, applicationSecret) {\n    if (applicationId == null) {\n      applicationId = defaultApplicationId;\n    }\n    const request = new FetchRequest(`https:/\\/${getHost(network.name)}/v1/lb/${applicationId}`);\n    request.allowGzip = true;\n    if (applicationSecret) {\n      request.setCredentials(\"\", applicationSecret);\n    }\n    if (applicationId === defaultApplicationId) {\n      request.retryFunc = async (request, response, attempt) => {\n        showThrottleMessage(\"PocketProvider\");\n        return true;\n      };\n    }\n    return request;\n  }\n  isCommunityResource() {\n    return this.applicationId === defaultApplicationId;\n  }\n}","map":{"version":3,"names":["defineProperties","FetchRequest","assertArgument","showThrottleMessage","Network","JsonRpcProvider","defaultApplicationId","getHost","name","PocketProvider","applicationId","applicationSecret","constructor","_network","network","from","options","staticNetwork","request","getRequest","_getProvider","chainId","error","allowGzip","setCredentials","retryFunc","response","attempt","isCommunityResource"],"sources":["C:\\Users\\patil\\OneDrive\\Desktop\\Hack4Good\\Supply-Chain\\supply-chain\\node_modules\\ethers\\src.ts\\providers\\provider-pocket.ts"],"sourcesContent":["/**\r\n *  [[link-pocket]] provides a third-party service for connecting to\r\n *  various blockchains over JSON-RPC.\r\n *\r\n *  **Supported Networks**\r\n *\r\n *  - Ethereum Mainnet (``mainnet``)\r\n *  - Goerli Testnet (``goerli``)\r\n *  - Polygon (``matic``)\r\n *  - Arbitrum (``arbitrum``)\r\n *\r\n *  @_subsection: api/providers/thirdparty:Pocket  [providers-pocket]\r\n */\r\nimport {\r\n    defineProperties, FetchRequest, assertArgument\r\n} from \"../utils/index.js\";\r\n\r\nimport { AbstractProvider } from \"./abstract-provider.js\";\r\nimport { showThrottleMessage } from \"./community.js\";\r\nimport { Network } from \"./network.js\";\r\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\r\n\r\nimport type { CommunityResourcable } from \"./community.js\";\r\nimport type { Networkish } from \"./network.js\";\r\n\r\nconst defaultApplicationId = \"62e1ad51b37b8e00394bda3b\";\r\n\r\nfunction getHost(name: string): string {\r\n    switch (name) {\r\n        case \"mainnet\":\r\n            return  \"eth-mainnet.gateway.pokt.network\";\r\n        case \"goerli\":\r\n            return \"eth-goerli.gateway.pokt.network\";\r\n\r\n        case \"matic\":\r\n            return \"poly-mainnet.gateway.pokt.network\";\r\n        case \"matic-mumbai\":\r\n            return \"polygon-mumbai-rpc.gateway.pokt.network\";\r\n    }\r\n\r\n    assertArgument(false, \"unsupported network\", \"network\", name);\r\n}\r\n\r\n\r\n/**\r\n *  The **PocketProvider** connects to the [[link-pocket]]\r\n *  JSON-RPC end-points.\r\n *\r\n *  By default, a highly-throttled API key is used, which is\r\n *  appropriate for quick prototypes and simple scripts. To\r\n *  gain access to an increased rate-limit, it is highly\r\n *  recommended to [sign up here](link-pocket-signup).\r\n */\r\nexport class PocketProvider extends JsonRpcProvider implements CommunityResourcable {\r\n\r\n    /**\r\n     *  The Application ID for the Pocket connection.\r\n     */\r\n    readonly applicationId!: string;\r\n\r\n    /**\r\n     *  The Application Secret for making authenticated requests\r\n     *  to the Pocket connection.\r\n     */\r\n    readonly applicationSecret!: null | string;\r\n\r\n    /**\r\n     *  Create a new **PocketProvider**.\r\n     *\r\n     *  By default connecting to ``mainnet`` with a highly throttled\r\n     *  API key.\r\n     */\r\n    constructor(_network?: Networkish, applicationId?: null | string, applicationSecret?: null | string) {\r\n        if (_network == null) { _network = \"mainnet\"; }\r\n        const network = Network.from(_network);\r\n        if (applicationId == null) { applicationId = defaultApplicationId; }\r\n        if (applicationSecret == null) { applicationSecret = null; }\r\n\r\n        const options = { staticNetwork: network };\r\n\r\n        const request = PocketProvider.getRequest(network, applicationId, applicationSecret);\r\n        super(request, network, options);\r\n\r\n        defineProperties<PocketProvider>(this, { applicationId, applicationSecret });\r\n    }\r\n\r\n    _getProvider(chainId: number): AbstractProvider {\r\n        try {\r\n            return new PocketProvider(chainId, this.applicationId, this.applicationSecret);\r\n        } catch (error) { }\r\n        return super._getProvider(chainId);\r\n    }\r\n\r\n    /**\r\n     *  Returns a prepared request for connecting to %%network%% with\r\n     *  %%applicationId%%.\r\n     */\r\n    static getRequest(network: Network, applicationId?: null | string, applicationSecret?: null | string): FetchRequest {\r\n        if (applicationId == null) { applicationId = defaultApplicationId; }\r\n\r\n        const request = new FetchRequest(`https:/\\/${ getHost(network.name) }/v1/lb/${ applicationId }`);\r\n        request.allowGzip = true;\r\n\r\n        if (applicationSecret) {\r\n            request.setCredentials(\"\", applicationSecret);\r\n        }\r\n\r\n        if (applicationId === defaultApplicationId) {\r\n            request.retryFunc = async (request, response, attempt) => {\r\n                showThrottleMessage(\"PocketProvider\");\r\n                return true;\r\n            };\r\n        }\r\n\r\n        return request;\r\n    }\r\n\r\n    isCommunityResource(): boolean {\r\n        return (this.applicationId === defaultApplicationId);\r\n    }\r\n}\r\n"],"mappings":"AAAA;;;;;;;;;;;;;AAaA,SACIA,gBAAgB,EAAEC,YAAY,EAAEC,cAAc,QAC3C,mBAAmB;AAG1B,SAASC,mBAAmB,QAAQ,gBAAgB;AACpD,SAASC,OAAO,QAAQ,cAAc;AACtC,SAASC,eAAe,QAAQ,uBAAuB;AAKvD,MAAMC,oBAAoB,GAAG,0BAA0B;AAEvD,SAASC,OAAOA,CAACC,IAAY;EACzB,QAAQA,IAAI;IACR,KAAK,SAAS;MACV,OAAQ,kCAAkC;IAC9C,KAAK,QAAQ;MACT,OAAO,iCAAiC;IAE5C,KAAK,OAAO;MACR,OAAO,mCAAmC;IAC9C,KAAK,cAAc;MACf,OAAO,yCAAyC;;EAGxDN,cAAc,CAAC,KAAK,EAAE,qBAAqB,EAAE,SAAS,EAAEM,IAAI,CAAC;AACjE;AAGA;;;;;;;;;AASA,OAAM,MAAOC,cAAe,SAAQJ,eAAe;EAE/C;;;EAGSK,aAAa;EAEtB;;;;EAISC,iBAAiB;EAE1B;;;;;;EAMAC,YAAYC,QAAqB,EAAEH,aAA6B,EAAEC,iBAAiC;IAC/F,IAAIE,QAAQ,IAAI,IAAI,EAAE;MAAEA,QAAQ,GAAG,SAAS;;IAC5C,MAAMC,OAAO,GAAGV,OAAO,CAACW,IAAI,CAACF,QAAQ,CAAC;IACtC,IAAIH,aAAa,IAAI,IAAI,EAAE;MAAEA,aAAa,GAAGJ,oBAAoB;;IACjE,IAAIK,iBAAiB,IAAI,IAAI,EAAE;MAAEA,iBAAiB,GAAG,IAAI;;IAEzD,MAAMK,OAAO,GAAG;MAAEC,aAAa,EAAEH;IAAO,CAAE;IAE1C,MAAMI,OAAO,GAAGT,cAAc,CAACU,UAAU,CAACL,OAAO,EAAEJ,aAAa,EAAEC,iBAAiB,CAAC;IACpF,KAAK,CAACO,OAAO,EAAEJ,OAAO,EAAEE,OAAO,CAAC;IAEhChB,gBAAgB,CAAiB,IAAI,EAAE;MAAEU,aAAa;MAAEC;IAAiB,CAAE,CAAC;EAChF;EAEAS,YAAYA,CAACC,OAAe;IACxB,IAAI;MACA,OAAO,IAAIZ,cAAc,CAACY,OAAO,EAAE,IAAI,CAACX,aAAa,EAAE,IAAI,CAACC,iBAAiB,CAAC;KACjF,CAAC,OAAOW,KAAK,EAAE;IAChB,OAAO,KAAK,CAACF,YAAY,CAACC,OAAO,CAAC;EACtC;EAEA;;;;EAIA,OAAOF,UAAUA,CAACL,OAAgB,EAAEJ,aAA6B,EAAEC,iBAAiC;IAChG,IAAID,aAAa,IAAI,IAAI,EAAE;MAAEA,aAAa,GAAGJ,oBAAoB;;IAEjE,MAAMY,OAAO,GAAG,IAAIjB,YAAY,CAAC,YAAaM,OAAO,CAACO,OAAO,CAACN,IAAI,CAAE,UAAWE,aAAc,EAAE,CAAC;IAChGQ,OAAO,CAACK,SAAS,GAAG,IAAI;IAExB,IAAIZ,iBAAiB,EAAE;MACnBO,OAAO,CAACM,cAAc,CAAC,EAAE,EAAEb,iBAAiB,CAAC;;IAGjD,IAAID,aAAa,KAAKJ,oBAAoB,EAAE;MACxCY,OAAO,CAACO,SAAS,GAAG,OAAOP,OAAO,EAAEQ,QAAQ,EAAEC,OAAO,KAAI;QACrDxB,mBAAmB,CAAC,gBAAgB,CAAC;QACrC,OAAO,IAAI;MACf,CAAC;;IAGL,OAAOe,OAAO;EAClB;EAEAU,mBAAmBA,CAAA;IACf,OAAQ,IAAI,CAAClB,aAAa,KAAKJ,oBAAoB;EACvD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}