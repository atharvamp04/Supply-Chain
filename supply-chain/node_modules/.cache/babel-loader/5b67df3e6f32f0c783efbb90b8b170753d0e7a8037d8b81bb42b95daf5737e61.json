{"ast":null,"code":"/**\r\n *  An **HMAC** enables verification that a given key was used\r\n *  to authenticate a payload.\r\n *\r\n *  See: [[link-wiki-hmac]]\r\n *\r\n *  @_subsection: api/crypto:HMAC  [about-hmac]\r\n */\nimport { createHmac } from \"./crypto.js\";\nimport { getBytes, hexlify } from \"../utils/index.js\";\nlet locked = false;\nconst _computeHmac = function (algorithm, key, data) {\n  return createHmac(algorithm, key).update(data).digest();\n};\nlet __computeHmac = _computeHmac;\n/**\r\n *  Return the HMAC for %%data%% using the %%key%% key with the underlying\r\n *  %%algo%% used for compression.\r\n *\r\n *  @example:\r\n *    key = id(\"some-secret\")\r\n *\r\n *    // Compute the HMAC\r\n *    computeHmac(\"sha256\", key, \"0x1337\")\r\n *    //_result:\r\n *\r\n *    // To compute the HMAC of UTF-8 data, the data must be\r\n *    // converted to UTF-8 bytes\r\n *    computeHmac(\"sha256\", key, toUtf8Bytes(\"Hello World\"))\r\n *    //_result:\r\n *\r\n */\nexport function computeHmac(algorithm, _key, _data) {\n  const key = getBytes(_key, \"key\");\n  const data = getBytes(_data, \"data\");\n  return hexlify(__computeHmac(algorithm, key, data));\n}\ncomputeHmac._ = _computeHmac;\ncomputeHmac.lock = function () {\n  locked = true;\n};\ncomputeHmac.register = function (func) {\n  if (locked) {\n    throw new Error(\"computeHmac is locked\");\n  }\n  __computeHmac = func;\n};\nObject.freeze(computeHmac);","map":{"version":3,"names":["createHmac","getBytes","hexlify","locked","_computeHmac","algorithm","key","data","update","digest","__computeHmac","computeHmac","_key","_data","_","lock","register","func","Error","Object","freeze"],"sources":["C:\\Users\\patil\\OneDrive\\Desktop\\Hack4Good\\Supply-Chain\\supply-chain\\node_modules\\ethers\\src.ts\\crypto\\hmac.ts"],"sourcesContent":["/**\r\n *  An **HMAC** enables verification that a given key was used\r\n *  to authenticate a payload.\r\n *\r\n *  See: [[link-wiki-hmac]]\r\n *\r\n *  @_subsection: api/crypto:HMAC  [about-hmac]\r\n */\r\nimport { createHmac } from \"./crypto.js\";\r\nimport { getBytes, hexlify } from \"../utils/index.js\";\r\n\r\nimport type { BytesLike } from \"../utils/index.js\";\r\n\r\n\r\nlet locked = false;\r\n\r\nconst _computeHmac = function(algorithm: \"sha256\" | \"sha512\", key: Uint8Array, data: Uint8Array): BytesLike {\r\n    return createHmac(algorithm, key).update(data).digest();\r\n}\r\n\r\nlet __computeHmac = _computeHmac;\r\n\r\n/**\r\n *  Return the HMAC for %%data%% using the %%key%% key with the underlying\r\n *  %%algo%% used for compression.\r\n *\r\n *  @example:\r\n *    key = id(\"some-secret\")\r\n *\r\n *    // Compute the HMAC\r\n *    computeHmac(\"sha256\", key, \"0x1337\")\r\n *    //_result:\r\n *\r\n *    // To compute the HMAC of UTF-8 data, the data must be\r\n *    // converted to UTF-8 bytes\r\n *    computeHmac(\"sha256\", key, toUtf8Bytes(\"Hello World\"))\r\n *    //_result:\r\n *\r\n */\r\nexport function computeHmac(algorithm: \"sha256\" | \"sha512\", _key: BytesLike, _data: BytesLike): string {\r\n    const key = getBytes(_key, \"key\");\r\n    const data = getBytes(_data, \"data\");\r\n    return hexlify(__computeHmac(algorithm, key, data));\r\n}\r\ncomputeHmac._ = _computeHmac;\r\ncomputeHmac.lock =  function() { locked = true; }\r\ncomputeHmac.register = function(func: (algorithm: \"sha256\" | \"sha512\", key: Uint8Array, data: Uint8Array) => BytesLike) {\r\n    if (locked) { throw new Error(\"computeHmac is locked\"); }\r\n    __computeHmac = func;\r\n}\r\nObject.freeze(computeHmac);\r\n"],"mappings":"AAAA;;;;;;;;AAQA,SAASA,UAAU,QAAQ,aAAa;AACxC,SAASC,QAAQ,EAAEC,OAAO,QAAQ,mBAAmB;AAKrD,IAAIC,MAAM,GAAG,KAAK;AAElB,MAAMC,YAAY,GAAG,SAAAA,CAASC,SAA8B,EAAEC,GAAe,EAAEC,IAAgB;EAC3F,OAAOP,UAAU,CAACK,SAAS,EAAEC,GAAG,CAAC,CAACE,MAAM,CAACD,IAAI,CAAC,CAACE,MAAM,EAAE;AAC3D,CAAC;AAED,IAAIC,aAAa,GAAGN,YAAY;AAEhC;;;;;;;;;;;;;;;;;AAiBA,OAAM,SAAUO,WAAWA,CAACN,SAA8B,EAAEO,IAAe,EAAEC,KAAgB;EACzF,MAAMP,GAAG,GAAGL,QAAQ,CAACW,IAAI,EAAE,KAAK,CAAC;EACjC,MAAML,IAAI,GAAGN,QAAQ,CAACY,KAAK,EAAE,MAAM,CAAC;EACpC,OAAOX,OAAO,CAACQ,aAAa,CAACL,SAAS,EAAEC,GAAG,EAAEC,IAAI,CAAC,CAAC;AACvD;AACAI,WAAW,CAACG,CAAC,GAAGV,YAAY;AAC5BO,WAAW,CAACI,IAAI,GAAI;EAAaZ,MAAM,GAAG,IAAI;AAAE,CAAC;AACjDQ,WAAW,CAACK,QAAQ,GAAG,UAASC,IAAsF;EAClH,IAAId,MAAM,EAAE;IAAE,MAAM,IAAIe,KAAK,CAAC,uBAAuB,CAAC;;EACtDR,aAAa,GAAGO,IAAI;AACxB,CAAC;AACDE,MAAM,CAACC,MAAM,CAACT,WAAW,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}