{"ast":null,"code":"// Use the encode-latin.js script to create the necessary\n// data files to be consumed by this class\nimport { id } from \"../hash/index.js\";\nimport { assertArgument } from \"../utils/index.js\";\nimport { decodeOwl } from \"./decode-owl.js\";\nimport { Wordlist } from \"./wordlist.js\";\n/**\r\n *  An OWL format Wordlist is an encoding method that exploits\r\n *  the general locality of alphabetically sorted words to\r\n *  achieve a simple but effective means of compression.\r\n *\r\n *  This class is generally not useful to most developers as\r\n *  it is used mainly internally to keep Wordlists for languages\r\n *  based on ASCII-7 small.\r\n *\r\n *  If necessary, there are tools within the ``generation/`` folder\r\n *  to create the necessary data.\r\n */\nexport class WordlistOwl extends Wordlist {\n  #data;\n  #checksum;\n  /**\r\n   *  Creates a new Wordlist for %%locale%% using the OWL %%data%%\r\n   *  and validated against the %%checksum%%.\r\n   */\n  constructor(locale, data, checksum) {\n    super(locale);\n    this.#data = data;\n    this.#checksum = checksum;\n    this.#words = null;\n  }\n  /**\r\n   *  The OWL-encoded data.\r\n   */\n  get _data() {\n    return this.#data;\n  }\n  /**\r\n   *  Decode all the words for the wordlist.\r\n   */\n  _decodeWords() {\n    return decodeOwl(this.#data);\n  }\n  #words;\n  #loadWords() {\n    if (this.#words == null) {\n      const words = this._decodeWords();\n      // Verify the computed list matches the official list\n      const checksum = id(words.join(\"\\n\") + \"\\n\");\n      /* c8 ignore start */\n      if (checksum !== this.#checksum) {\n        throw new Error(`BIP39 Wordlist for ${this.locale} FAILED`);\n      }\n      /* c8 ignore stop */\n      this.#words = words;\n    }\n    return this.#words;\n  }\n  getWord(index) {\n    const words = this.#loadWords();\n    assertArgument(index >= 0 && index < words.length, `invalid word index: ${index}`, \"index\", index);\n    return words[index];\n  }\n  getWordIndex(word) {\n    return this.#loadWords().indexOf(word);\n  }\n}","map":{"version":3,"names":["id","assertArgument","decodeOwl","Wordlist","WordlistOwl","data","checksum","constructor","locale","words","_data","_decodeWords","loadWords","#loadWords","join","Error","getWord","index","length","getWordIndex","word","indexOf"],"sources":["C:\\Users\\patil\\OneDrive\\Desktop\\Hack4Good\\Supply-Chain\\supply-chain\\node_modules\\ethers\\src.ts\\wordlists\\wordlist-owl.ts"],"sourcesContent":["\r\n// Use the encode-latin.js script to create the necessary\r\n// data files to be consumed by this class\r\n\r\nimport { id } from \"../hash/index.js\";\r\nimport { assertArgument } from \"../utils/index.js\";\r\n\r\nimport { decodeOwl } from \"./decode-owl.js\";\r\nimport { Wordlist } from \"./wordlist.js\";\r\n\r\n/**\r\n *  An OWL format Wordlist is an encoding method that exploits\r\n *  the general locality of alphabetically sorted words to\r\n *  achieve a simple but effective means of compression.\r\n *\r\n *  This class is generally not useful to most developers as\r\n *  it is used mainly internally to keep Wordlists for languages\r\n *  based on ASCII-7 small.\r\n *\r\n *  If necessary, there are tools within the ``generation/`` folder\r\n *  to create the necessary data.\r\n */\r\nexport class WordlistOwl extends Wordlist {\r\n    #data: string;\r\n    #checksum: string;\r\n\r\n    /**\r\n     *  Creates a new Wordlist for %%locale%% using the OWL %%data%%\r\n     *  and validated against the %%checksum%%.\r\n     */\r\n    constructor(locale: string, data: string, checksum: string) {\r\n        super(locale);\r\n        this.#data = data;\r\n        this.#checksum = checksum;\r\n        this.#words = null;\r\n    }\r\n\r\n    /**\r\n     *  The OWL-encoded data.\r\n     */\r\n    get _data(): string { return this.#data; }\r\n\r\n    /**\r\n     *  Decode all the words for the wordlist.\r\n     */\r\n    _decodeWords(): Array<string> {\r\n        return decodeOwl(this.#data);\r\n    }\r\n\r\n    #words: null | Array<string>;\r\n    #loadWords(): Array<string> {\r\n        if (this.#words == null) {\r\n            const words = this._decodeWords();\r\n\r\n            // Verify the computed list matches the official list\r\n            const checksum = id(words.join(\"\\n\") + \"\\n\");\r\n            /* c8 ignore start */\r\n            if (checksum !== this.#checksum) {\r\n                throw new Error(`BIP39 Wordlist for ${ this.locale } FAILED`);\r\n            }\r\n            /* c8 ignore stop */\r\n\r\n            this.#words = words;\r\n        }\r\n        return this.#words;\r\n    }\r\n\r\n    getWord(index: number): string {\r\n        const words = this.#loadWords();\r\n        assertArgument(index >= 0 && index < words.length, `invalid word index: ${ index }`, \"index\", index);\r\n        return words[index];\r\n    }\r\n\r\n    getWordIndex(word: string): number {\r\n        return this.#loadWords().indexOf(word);\r\n    }\r\n}\r\n"],"mappings":"AACA;AACA;AAEA,SAASA,EAAE,QAAQ,kBAAkB;AACrC,SAASC,cAAc,QAAQ,mBAAmB;AAElD,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,QAAQ,QAAQ,eAAe;AAExC;;;;;;;;;;;;AAYA,OAAM,MAAOC,WAAY,SAAQD,QAAQ;EACrC,CAAAE,IAAK;EACL,CAAAC,QAAS;EAET;;;;EAIAC,YAAYC,MAAc,EAAEH,IAAY,EAAEC,QAAgB;IACtD,KAAK,CAACE,MAAM,CAAC;IACb,IAAI,CAAC,CAAAH,IAAK,GAAGA,IAAI;IACjB,IAAI,CAAC,CAAAC,QAAS,GAAGA,QAAQ;IACzB,IAAI,CAAC,CAAAG,KAAM,GAAG,IAAI;EACtB;EAEA;;;EAGA,IAAIC,KAAKA,CAAA;IAAa,OAAO,IAAI,CAAC,CAAAL,IAAK;EAAE;EAEzC;;;EAGAM,YAAYA,CAAA;IACR,OAAOT,SAAS,CAAC,IAAI,CAAC,CAAAG,IAAK,CAAC;EAChC;EAEA,CAAAI,KAAM;EACN,CAAAG,SAAUC,CAAA;IACN,IAAI,IAAI,CAAC,CAAAJ,KAAM,IAAI,IAAI,EAAE;MACrB,MAAMA,KAAK,GAAG,IAAI,CAACE,YAAY,EAAE;MAEjC;MACA,MAAML,QAAQ,GAAGN,EAAE,CAACS,KAAK,CAACK,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;MAC5C;MACA,IAAIR,QAAQ,KAAK,IAAI,CAAC,CAAAA,QAAS,EAAE;QAC7B,MAAM,IAAIS,KAAK,CAAC,sBAAuB,IAAI,CAACP,MAAO,SAAS,CAAC;;MAEjE;MAEA,IAAI,CAAC,CAAAC,KAAM,GAAGA,KAAK;;IAEvB,OAAO,IAAI,CAAC,CAAAA,KAAM;EACtB;EAEAO,OAAOA,CAACC,KAAa;IACjB,MAAMR,KAAK,GAAG,IAAI,CAAC,CAAAG,SAAU,EAAE;IAC/BX,cAAc,CAACgB,KAAK,IAAI,CAAC,IAAIA,KAAK,GAAGR,KAAK,CAACS,MAAM,EAAE,uBAAwBD,KAAM,EAAE,EAAE,OAAO,EAAEA,KAAK,CAAC;IACpG,OAAOR,KAAK,CAACQ,KAAK,CAAC;EACvB;EAEAE,YAAYA,CAACC,IAAY;IACrB,OAAO,IAAI,CAAC,CAAAR,SAAU,EAAE,CAACS,OAAO,CAACD,IAAI,CAAC;EAC1C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}