{"ast":null,"code":"/**\r\n *  [[link-ankr]] provides a third-party service for connecting to\r\n *  various blockchains over JSON-RPC.\r\n *\r\n *  **Supported Networks**\r\n *\r\n *  - Ethereum Mainnet (``mainnet``)\r\n *  - Goerli Testnet (``goerli``)\r\n *  - Sepolia Testnet (``sepolia``)\r\n *  - Arbitrum (``arbitrum``)\r\n *  - Base (``base``)\r\n *  - Base Goerlia Testnet (``base-goerli``)\r\n *  - Base Sepolia Testnet (``base-sepolia``)\r\n *  - BNB (``bnb``)\r\n *  - BNB Testnet (``bnbt``)\r\n *  - Optimism (``optimism``)\r\n *  - Optimism Goerli Testnet (``optimism-goerli``)\r\n *  - Optimism Sepolia Testnet (``optimism-sepolia``)\r\n *  - Polygon (``matic``)\r\n *  - Polygon Mumbai Testnet (``matic-mumbai``)\r\n *\r\n *  @_subsection: api/providers/thirdparty:Ankr  [providers-ankr]\r\n */\nimport { defineProperties, FetchRequest, assertArgument } from \"../utils/index.js\";\nimport { showThrottleMessage } from \"./community.js\";\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\nconst defaultApiKey = \"9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972\";\nfunction getHost(name) {\n  switch (name) {\n    case \"mainnet\":\n      return \"rpc.ankr.com/eth\";\n    case \"goerli\":\n      return \"rpc.ankr.com/eth_goerli\";\n    case \"sepolia\":\n      return \"rpc.ankr.com/eth_sepolia\";\n    case \"arbitrum\":\n      return \"rpc.ankr.com/arbitrum\";\n    case \"base\":\n      return \"rpc.ankr.com/base\";\n    case \"base-goerli\":\n      return \"rpc.ankr.com/base_goerli\";\n    case \"base-sepolia\":\n      return \"rpc.ankr.com/base_sepolia\";\n    case \"bnb\":\n      return \"rpc.ankr.com/bsc\";\n    case \"bnbt\":\n      return \"rpc.ankr.com/bsc_testnet_chapel\";\n    case \"matic\":\n      return \"rpc.ankr.com/polygon\";\n    case \"matic-mumbai\":\n      return \"rpc.ankr.com/polygon_mumbai\";\n    case \"optimism\":\n      return \"rpc.ankr.com/optimism\";\n    case \"optimism-goerli\":\n      return \"rpc.ankr.com/optimism_testnet\";\n    case \"optimism-sepolia\":\n      return \"rpc.ankr.com/optimism_sepolia\";\n  }\n  assertArgument(false, \"unsupported network\", \"network\", name);\n}\n/**\r\n *  The **AnkrProvider** connects to the [[link-ankr]]\r\n *  JSON-RPC end-points.\r\n *\r\n *  By default, a highly-throttled API key is used, which is\r\n *  appropriate for quick prototypes and simple scripts. To\r\n *  gain access to an increased rate-limit, it is highly\r\n *  recommended to [sign up here](link-ankr-signup).\r\n */\nexport class AnkrProvider extends JsonRpcProvider {\n  /**\r\n   *  The API key for the Ankr connection.\r\n   */\n  apiKey;\n  /**\r\n   *  Create a new **AnkrProvider**.\r\n   *\r\n   *  By default connecting to ``mainnet`` with a highly throttled\r\n   *  API key.\r\n   */\n  constructor(_network, apiKey) {\n    if (_network == null) {\n      _network = \"mainnet\";\n    }\n    const network = Network.from(_network);\n    if (apiKey == null) {\n      apiKey = defaultApiKey;\n    }\n    // Ankr does not support filterId, so we force polling\n    const options = {\n      polling: true,\n      staticNetwork: network\n    };\n    const request = AnkrProvider.getRequest(network, apiKey);\n    super(request, network, options);\n    defineProperties(this, {\n      apiKey\n    });\n  }\n  _getProvider(chainId) {\n    try {\n      return new AnkrProvider(chainId, this.apiKey);\n    } catch (error) {}\n    return super._getProvider(chainId);\n  }\n  /**\r\n   *  Returns a prepared request for connecting to %%network%% with\r\n   *  %%apiKey%%.\r\n   */\n  static getRequest(network, apiKey) {\n    if (apiKey == null) {\n      apiKey = defaultApiKey;\n    }\n    const request = new FetchRequest(`https:/\\/${getHost(network.name)}/${apiKey}`);\n    request.allowGzip = true;\n    if (apiKey === defaultApiKey) {\n      request.retryFunc = async (request, response, attempt) => {\n        showThrottleMessage(\"AnkrProvider\");\n        return true;\n      };\n    }\n    return request;\n  }\n  getRpcError(payload, error) {\n    if (payload.method === \"eth_sendRawTransaction\") {\n      if (error && error.error && error.error.message === \"INTERNAL_ERROR: could not replace existing tx\") {\n        error.error.message = \"replacement transaction underpriced\";\n      }\n    }\n    return super.getRpcError(payload, error);\n  }\n  isCommunityResource() {\n    return this.apiKey === defaultApiKey;\n  }\n}","map":{"version":3,"names":["defineProperties","FetchRequest","assertArgument","showThrottleMessage","Network","JsonRpcProvider","defaultApiKey","getHost","name","AnkrProvider","apiKey","constructor","_network","network","from","options","polling","staticNetwork","request","getRequest","_getProvider","chainId","error","allowGzip","retryFunc","response","attempt","getRpcError","payload","method","message","isCommunityResource"],"sources":["C:\\Users\\patil\\OneDrive\\Desktop\\Hack4Good\\Supply-Chain\\supply-chain\\node_modules\\ethers\\src.ts\\providers\\provider-ankr.ts"],"sourcesContent":["/**\r\n *  [[link-ankr]] provides a third-party service for connecting to\r\n *  various blockchains over JSON-RPC.\r\n *\r\n *  **Supported Networks**\r\n *\r\n *  - Ethereum Mainnet (``mainnet``)\r\n *  - Goerli Testnet (``goerli``)\r\n *  - Sepolia Testnet (``sepolia``)\r\n *  - Arbitrum (``arbitrum``)\r\n *  - Base (``base``)\r\n *  - Base Goerlia Testnet (``base-goerli``)\r\n *  - Base Sepolia Testnet (``base-sepolia``)\r\n *  - BNB (``bnb``)\r\n *  - BNB Testnet (``bnbt``)\r\n *  - Optimism (``optimism``)\r\n *  - Optimism Goerli Testnet (``optimism-goerli``)\r\n *  - Optimism Sepolia Testnet (``optimism-sepolia``)\r\n *  - Polygon (``matic``)\r\n *  - Polygon Mumbai Testnet (``matic-mumbai``)\r\n *\r\n *  @_subsection: api/providers/thirdparty:Ankr  [providers-ankr]\r\n */\r\nimport {\r\n    defineProperties, FetchRequest, assertArgument\r\n} from \"../utils/index.js\";\r\n\r\nimport { AbstractProvider } from \"./abstract-provider.js\";\r\nimport { showThrottleMessage } from \"./community.js\";\r\nimport { Network } from \"./network.js\";\r\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\r\n\r\nimport type { CommunityResourcable } from \"./community.js\";\r\nimport type { Networkish } from \"./network.js\";\r\nimport type { JsonRpcError, JsonRpcPayload } from \"./provider-jsonrpc.js\";\r\n\r\n\r\nconst defaultApiKey = \"9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972\";\r\n\r\nfunction getHost(name: string): string {\r\n    switch (name) {\r\n        case \"mainnet\":\r\n            return \"rpc.ankr.com/eth\";\r\n        case \"goerli\":\r\n            return \"rpc.ankr.com/eth_goerli\";\r\n        case \"sepolia\":\r\n            return \"rpc.ankr.com/eth_sepolia\";\r\n\r\n        case \"arbitrum\":\r\n            return \"rpc.ankr.com/arbitrum\";\r\n        case \"base\":\r\n            return \"rpc.ankr.com/base\";\r\n        case \"base-goerli\":\r\n            return \"rpc.ankr.com/base_goerli\";\r\n        case \"base-sepolia\":\r\n            return \"rpc.ankr.com/base_sepolia\";\r\n        case \"bnb\":\r\n            return \"rpc.ankr.com/bsc\";\r\n        case \"bnbt\":\r\n            return \"rpc.ankr.com/bsc_testnet_chapel\";\r\n        case \"matic\":\r\n            return \"rpc.ankr.com/polygon\";\r\n        case \"matic-mumbai\":\r\n            return \"rpc.ankr.com/polygon_mumbai\";\r\n        case \"optimism\":\r\n            return \"rpc.ankr.com/optimism\";\r\n        case \"optimism-goerli\":\r\n            return \"rpc.ankr.com/optimism_testnet\";\r\n        case \"optimism-sepolia\":\r\n            return \"rpc.ankr.com/optimism_sepolia\";\r\n    }\r\n\r\n    assertArgument(false, \"unsupported network\", \"network\", name);\r\n}\r\n\r\n\r\n/**\r\n *  The **AnkrProvider** connects to the [[link-ankr]]\r\n *  JSON-RPC end-points.\r\n *\r\n *  By default, a highly-throttled API key is used, which is\r\n *  appropriate for quick prototypes and simple scripts. To\r\n *  gain access to an increased rate-limit, it is highly\r\n *  recommended to [sign up here](link-ankr-signup).\r\n */\r\nexport class AnkrProvider extends JsonRpcProvider implements CommunityResourcable {\r\n\r\n    /**\r\n     *  The API key for the Ankr connection.\r\n     */\r\n    readonly apiKey!: string;\r\n\r\n    /**\r\n     *  Create a new **AnkrProvider**.\r\n     *\r\n     *  By default connecting to ``mainnet`` with a highly throttled\r\n     *  API key.\r\n     */\r\n    constructor(_network?: Networkish, apiKey?: null | string) {\r\n        if (_network == null) { _network = \"mainnet\"; }\r\n        const network = Network.from(_network);\r\n        if (apiKey == null) { apiKey = defaultApiKey; }\r\n\r\n        // Ankr does not support filterId, so we force polling\r\n        const options = { polling: true, staticNetwork: network };\r\n\r\n        const request = AnkrProvider.getRequest(network, apiKey);\r\n        super(request, network, options);\r\n\r\n        defineProperties<AnkrProvider>(this, { apiKey });\r\n    }\r\n\r\n    _getProvider(chainId: number): AbstractProvider {\r\n        try {\r\n            return new AnkrProvider(chainId, this.apiKey);\r\n        } catch (error) { }\r\n        return super._getProvider(chainId);\r\n    }\r\n\r\n    /**\r\n     *  Returns a prepared request for connecting to %%network%% with\r\n     *  %%apiKey%%.\r\n     */\r\n    static getRequest(network: Network, apiKey?: null | string): FetchRequest {\r\n        if (apiKey == null) { apiKey = defaultApiKey; }\r\n\r\n        const request = new FetchRequest(`https:/\\/${ getHost(network.name) }/${ apiKey }`);\r\n        request.allowGzip = true;\r\n\r\n        if (apiKey === defaultApiKey) {\r\n            request.retryFunc = async (request, response, attempt) => {\r\n                showThrottleMessage(\"AnkrProvider\");\r\n                return true;\r\n            };\r\n        }\r\n\r\n        return request;\r\n    }\r\n\r\n    getRpcError(payload: JsonRpcPayload, error: JsonRpcError): Error {\r\n        if (payload.method === \"eth_sendRawTransaction\") {\r\n            if (error && error.error && error.error.message === \"INTERNAL_ERROR: could not replace existing tx\") {\r\n                error.error.message = \"replacement transaction underpriced\";\r\n            }\r\n        }\r\n\r\n        return super.getRpcError(payload, error);\r\n    }\r\n\r\n    isCommunityResource(): boolean {\r\n        return (this.apiKey === defaultApiKey);\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}