{"ast":null,"code":"/**\r\n *  [[link-quicknode]] provides a third-party service for connecting to\r\n *  various blockchains over JSON-RPC.\r\n *\r\n *  **Supported Networks**\r\n *\r\n *  - Ethereum Mainnet (``mainnet``)\r\n *  - Goerli Testnet (``goerli``)\r\n *  - Sepolia Testnet (``sepolia``)\r\n *  - Holesky Testnet (``holesky``)\r\n *  - Arbitrum (``arbitrum``)\r\n *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)\r\n *  - Arbitrum Sepolia Testnet (``arbitrum-sepolia``)\r\n *  - Base Mainnet (``base``);\r\n *  - Base Goerli Testnet (``base-goerli``);\r\n *  - Base Sepolia Testnet (``base-sepolia``);\r\n *  - BNB Smart Chain Mainnet (``bnb``)\r\n *  - BNB Smart Chain Testnet (``bnbt``)\r\n *  - Optimism (``optimism``)\r\n *  - Optimism Goerli Testnet (``optimism-goerli``)\r\n *  - Optimism Sepolia Testnet (``optimism-sepolia``)\r\n *  - Polygon (``matic``)\r\n *  - Polygon Mumbai Testnet (``matic-mumbai``)\r\n *\r\n *  @_subsection: api/providers/thirdparty:QuickNode  [providers-quicknode]\r\n */\nimport { defineProperties, FetchRequest, assertArgument } from \"../utils/index.js\";\nimport { showThrottleMessage } from \"./community.js\";\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\nconst defaultToken = \"919b412a057b5e9c9b6dce193c5a60242d6efadb\";\nfunction getHost(name) {\n  switch (name) {\n    case \"mainnet\":\n      return \"ethers.quiknode.pro\";\n    case \"goerli\":\n      return \"ethers.ethereum-goerli.quiknode.pro\";\n    case \"sepolia\":\n      return \"ethers.ethereum-sepolia.quiknode.pro\";\n    case \"holesky\":\n      return \"ethers.ethereum-holesky.quiknode.pro\";\n    case \"arbitrum\":\n      return \"ethers.arbitrum-mainnet.quiknode.pro\";\n    case \"arbitrum-goerli\":\n      return \"ethers.arbitrum-goerli.quiknode.pro\";\n    case \"arbitrum-sepolia\":\n      return \"ethers.arbitrum-sepolia.quiknode.pro\";\n    case \"base\":\n      return \"ethers.base-mainnet.quiknode.pro\";\n    case \"base-goerli\":\n      return \"ethers.base-goerli.quiknode.pro\";\n    case \"base-spolia\":\n      return \"ethers.base-sepolia.quiknode.pro\";\n    case \"bnb\":\n      return \"ethers.bsc.quiknode.pro\";\n    case \"bnbt\":\n      return \"ethers.bsc-testnet.quiknode.pro\";\n    case \"matic\":\n      return \"ethers.matic.quiknode.pro\";\n    case \"matic-mumbai\":\n      return \"ethers.matic-testnet.quiknode.pro\";\n    case \"optimism\":\n      return \"ethers.optimism.quiknode.pro\";\n    case \"optimism-goerli\":\n      return \"ethers.optimism-goerli.quiknode.pro\";\n    case \"optimism-sepolia\":\n      return \"ethers.optimism-sepolia.quiknode.pro\";\n    case \"xdai\":\n      return \"ethers.xdai.quiknode.pro\";\n  }\n  assertArgument(false, \"unsupported network\", \"network\", name);\n}\n/*\r\n@TODO:\r\n  These networks are not currently present in the Network\r\n  default included networks. Research them and ensure they\r\n  are EVM compatible and work with ethers\r\n\r\n  http://ethers.matic-amoy.quiknode.pro\r\n\r\n  http://ethers.avalanche-mainnet.quiknode.pro\r\n  http://ethers.avalanche-testnet.quiknode.pro\r\n  http://ethers.blast-sepolia.quiknode.pro\r\n  http://ethers.celo-mainnet.quiknode.pro\r\n  http://ethers.fantom.quiknode.pro\r\n  http://ethers.imx-demo.quiknode.pro\r\n  http://ethers.imx-mainnet.quiknode.pro\r\n  http://ethers.imx-testnet.quiknode.pro\r\n  http://ethers.near-mainnet.quiknode.pro\r\n  http://ethers.near-testnet.quiknode.pro\r\n  http://ethers.nova-mainnet.quiknode.pro\r\n  http://ethers.scroll-mainnet.quiknode.pro\r\n  http://ethers.scroll-testnet.quiknode.pro\r\n  http://ethers.tron-mainnet.quiknode.pro\r\n  http://ethers.zkevm-mainnet.quiknode.pro\r\n  http://ethers.zkevm-testnet.quiknode.pro\r\n  http://ethers.zksync-mainnet.quiknode.pro\r\n  http://ethers.zksync-testnet.quiknode.pro\r\n*/\n/**\r\n *  The **QuickNodeProvider** connects to the [[link-quicknode]]\r\n *  JSON-RPC end-points.\r\n *\r\n *  By default, a highly-throttled API token is used, which is\r\n *  appropriate for quick prototypes and simple scripts. To\r\n *  gain access to an increased rate-limit, it is highly\r\n *  recommended to [sign up here](link-quicknode).\r\n */\nexport class QuickNodeProvider extends JsonRpcProvider {\n  /**\r\n   *  The API token.\r\n   */\n  token;\n  /**\r\n   *  Creates a new **QuickNodeProvider**.\r\n   */\n  constructor(_network, token) {\n    if (_network == null) {\n      _network = \"mainnet\";\n    }\n    const network = Network.from(_network);\n    if (token == null) {\n      token = defaultToken;\n    }\n    const request = QuickNodeProvider.getRequest(network, token);\n    super(request, network, {\n      staticNetwork: network\n    });\n    defineProperties(this, {\n      token\n    });\n  }\n  _getProvider(chainId) {\n    try {\n      return new QuickNodeProvider(chainId, this.token);\n    } catch (error) {}\n    return super._getProvider(chainId);\n  }\n  isCommunityResource() {\n    return this.token === defaultToken;\n  }\n  /**\r\n   *  Returns a new request prepared for %%network%% and the\r\n   *  %%token%%.\r\n   */\n  static getRequest(network, token) {\n    if (token == null) {\n      token = defaultToken;\n    }\n    const request = new FetchRequest(`https:/\\/${getHost(network.name)}/${token}`);\n    request.allowGzip = true;\n    //if (projectSecret) { request.setCredentials(\"\", projectSecret); }\n    if (token === defaultToken) {\n      request.retryFunc = async (request, response, attempt) => {\n        showThrottleMessage(\"QuickNodeProvider\");\n        return true;\n      };\n    }\n    return request;\n  }\n}","map":{"version":3,"names":["defineProperties","FetchRequest","assertArgument","showThrottleMessage","Network","JsonRpcProvider","defaultToken","getHost","name","QuickNodeProvider","token","constructor","_network","network","from","request","getRequest","staticNetwork","_getProvider","chainId","error","isCommunityResource","allowGzip","retryFunc","response","attempt"],"sources":["C:\\Users\\patil\\OneDrive\\Desktop\\Hack4Good\\Supply-Chain\\supply-chain\\node_modules\\ethers\\src.ts\\providers\\provider-quicknode.ts"],"sourcesContent":["/**\r\n *  [[link-quicknode]] provides a third-party service for connecting to\r\n *  various blockchains over JSON-RPC.\r\n *\r\n *  **Supported Networks**\r\n *\r\n *  - Ethereum Mainnet (``mainnet``)\r\n *  - Goerli Testnet (``goerli``)\r\n *  - Sepolia Testnet (``sepolia``)\r\n *  - Holesky Testnet (``holesky``)\r\n *  - Arbitrum (``arbitrum``)\r\n *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)\r\n *  - Arbitrum Sepolia Testnet (``arbitrum-sepolia``)\r\n *  - Base Mainnet (``base``);\r\n *  - Base Goerli Testnet (``base-goerli``);\r\n *  - Base Sepolia Testnet (``base-sepolia``);\r\n *  - BNB Smart Chain Mainnet (``bnb``)\r\n *  - BNB Smart Chain Testnet (``bnbt``)\r\n *  - Optimism (``optimism``)\r\n *  - Optimism Goerli Testnet (``optimism-goerli``)\r\n *  - Optimism Sepolia Testnet (``optimism-sepolia``)\r\n *  - Polygon (``matic``)\r\n *  - Polygon Mumbai Testnet (``matic-mumbai``)\r\n *\r\n *  @_subsection: api/providers/thirdparty:QuickNode  [providers-quicknode]\r\n */\r\n\r\nimport {\r\n    defineProperties, FetchRequest, assertArgument\r\n} from \"../utils/index.js\";\r\n\r\nimport { showThrottleMessage } from \"./community.js\";\r\nimport { Network } from \"./network.js\";\r\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\r\n\r\nimport type { AbstractProvider } from \"./abstract-provider.js\";\r\nimport type { CommunityResourcable } from \"./community.js\";\r\nimport type { Networkish } from \"./network.js\";\r\n\r\n\r\nconst defaultToken = \"919b412a057b5e9c9b6dce193c5a60242d6efadb\";\r\n\r\nfunction getHost(name: string): string {\r\n    switch(name) {\r\n        case \"mainnet\":\r\n            return \"ethers.quiknode.pro\";\r\n        case \"goerli\":\r\n            return \"ethers.ethereum-goerli.quiknode.pro\";\r\n        case \"sepolia\":\r\n            return \"ethers.ethereum-sepolia.quiknode.pro\";\r\n        case \"holesky\":\r\n            return \"ethers.ethereum-holesky.quiknode.pro\";\r\n\r\n        case \"arbitrum\":\r\n            return \"ethers.arbitrum-mainnet.quiknode.pro\";\r\n        case \"arbitrum-goerli\":\r\n            return \"ethers.arbitrum-goerli.quiknode.pro\";\r\n        case \"arbitrum-sepolia\":\r\n            return \"ethers.arbitrum-sepolia.quiknode.pro\";\r\n        case \"base\":\r\n            return \"ethers.base-mainnet.quiknode.pro\";\r\n        case \"base-goerli\":\r\n            return \"ethers.base-goerli.quiknode.pro\";\r\n        case \"base-spolia\":\r\n            return \"ethers.base-sepolia.quiknode.pro\";\r\n        case \"bnb\":\r\n            return \"ethers.bsc.quiknode.pro\";\r\n        case \"bnbt\":\r\n            return \"ethers.bsc-testnet.quiknode.pro\";\r\n        case \"matic\":\r\n            return \"ethers.matic.quiknode.pro\";\r\n        case \"matic-mumbai\":\r\n            return \"ethers.matic-testnet.quiknode.pro\";\r\n        case \"optimism\":\r\n            return \"ethers.optimism.quiknode.pro\";\r\n        case \"optimism-goerli\":\r\n            return \"ethers.optimism-goerli.quiknode.pro\";\r\n        case \"optimism-sepolia\":\r\n            return \"ethers.optimism-sepolia.quiknode.pro\";\r\n        case \"xdai\":\r\n            return \"ethers.xdai.quiknode.pro\";\r\n    }\r\n\r\n    assertArgument(false, \"unsupported network\", \"network\", name);\r\n}\r\n\r\n/*\r\n@TODO:\r\n  These networks are not currently present in the Network\r\n  default included networks. Research them and ensure they\r\n  are EVM compatible and work with ethers\r\n\r\n  http://ethers.matic-amoy.quiknode.pro\r\n\r\n  http://ethers.avalanche-mainnet.quiknode.pro\r\n  http://ethers.avalanche-testnet.quiknode.pro\r\n  http://ethers.blast-sepolia.quiknode.pro\r\n  http://ethers.celo-mainnet.quiknode.pro\r\n  http://ethers.fantom.quiknode.pro\r\n  http://ethers.imx-demo.quiknode.pro\r\n  http://ethers.imx-mainnet.quiknode.pro\r\n  http://ethers.imx-testnet.quiknode.pro\r\n  http://ethers.near-mainnet.quiknode.pro\r\n  http://ethers.near-testnet.quiknode.pro\r\n  http://ethers.nova-mainnet.quiknode.pro\r\n  http://ethers.scroll-mainnet.quiknode.pro\r\n  http://ethers.scroll-testnet.quiknode.pro\r\n  http://ethers.tron-mainnet.quiknode.pro\r\n  http://ethers.zkevm-mainnet.quiknode.pro\r\n  http://ethers.zkevm-testnet.quiknode.pro\r\n  http://ethers.zksync-mainnet.quiknode.pro\r\n  http://ethers.zksync-testnet.quiknode.pro\r\n*/\r\n\r\n\r\n\r\n/**\r\n *  The **QuickNodeProvider** connects to the [[link-quicknode]]\r\n *  JSON-RPC end-points.\r\n *\r\n *  By default, a highly-throttled API token is used, which is\r\n *  appropriate for quick prototypes and simple scripts. To\r\n *  gain access to an increased rate-limit, it is highly\r\n *  recommended to [sign up here](link-quicknode).\r\n */\r\nexport class QuickNodeProvider extends JsonRpcProvider implements CommunityResourcable {\r\n    /**\r\n     *  The API token.\r\n     */\r\n    readonly token!: string;\r\n\r\n    /**\r\n     *  Creates a new **QuickNodeProvider**.\r\n     */\r\n    constructor(_network?: Networkish, token?: null | string) {\r\n        if (_network == null) { _network = \"mainnet\"; }\r\n        const network = Network.from(_network);\r\n        if (token == null) { token = defaultToken; }\r\n\r\n        const request = QuickNodeProvider.getRequest(network, token);\r\n        super(request, network, { staticNetwork: network });\r\n\r\n        defineProperties<QuickNodeProvider>(this, { token });\r\n    }\r\n\r\n    _getProvider(chainId: number): AbstractProvider {\r\n        try {\r\n            return new QuickNodeProvider(chainId, this.token);\r\n        } catch (error) { }\r\n        return super._getProvider(chainId);\r\n    }\r\n\r\n    isCommunityResource(): boolean {\r\n        return (this.token === defaultToken);\r\n    }\r\n\r\n    /**\r\n     *  Returns a new request prepared for %%network%% and the\r\n     *  %%token%%.\r\n     */\r\n    static getRequest(network: Network, token?: null | string): FetchRequest {\r\n        if (token == null) { token = defaultToken; }\r\n\r\n        const request = new FetchRequest(`https:/\\/${ getHost(network.name) }/${ token }`);\r\n        request.allowGzip = true;\r\n        //if (projectSecret) { request.setCredentials(\"\", projectSecret); }\r\n\r\n        if (token === defaultToken) {\r\n            request.retryFunc = async (request, response, attempt) => {\r\n                showThrottleMessage(\"QuickNodeProvider\");\r\n                return true;\r\n            };\r\n        }\r\n\r\n        return request;\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}