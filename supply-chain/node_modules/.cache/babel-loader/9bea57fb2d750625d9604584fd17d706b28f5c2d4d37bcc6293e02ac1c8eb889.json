{"ast":null,"code":"import { defineProperties } from \"../utils/properties.js\";\nimport { assertArgument } from \"../utils/index.js\";\nconst EnsAddress = \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\";\n/**\r\n *  A **NetworkPlugin** provides additional functionality on a [[Network]].\r\n */\nexport class NetworkPlugin {\n  /**\r\n   *  The name of the plugin.\r\n   *\r\n   *  It is recommended to use reverse-domain-notation, which permits\r\n   *  unique names with a known authority as well as hierarchal entries.\r\n   */\n  name;\n  /**\r\n   *  Creates a new **NetworkPlugin**.\r\n   */\n  constructor(name) {\n    defineProperties(this, {\n      name\n    });\n  }\n  /**\r\n   *  Creates a copy of this plugin.\r\n   */\n  clone() {\n    return new NetworkPlugin(this.name);\n  }\n}\n/**\r\n *  A **GasCostPlugin** allows a network to provide alternative values when\r\n *  computing the intrinsic gas required for a transaction.\r\n */\nexport class GasCostPlugin extends NetworkPlugin {\n  /**\r\n   *  The block number to treat these values as valid from.\r\n   *\r\n   *  This allows a hardfork to have updated values included as well as\r\n   *  mulutiple hardforks to be supported.\r\n   */\n  effectiveBlock;\n  /**\r\n   *  The transactions base fee.\r\n   */\n  txBase;\n  /**\r\n   *  The fee for creating a new account.\r\n   */\n  txCreate;\n  /**\r\n   *  The fee per zero-byte in the data.\r\n   */\n  txDataZero;\n  /**\r\n   *  The fee per non-zero-byte in the data.\r\n   */\n  txDataNonzero;\n  /**\r\n   *  The fee per storage key in the [[link-eip-2930]] access list.\r\n   */\n  txAccessListStorageKey;\n  /**\r\n   *  The fee per address in the [[link-eip-2930]] access list.\r\n   */\n  txAccessListAddress;\n  /**\r\n   *  Creates a new GasCostPlugin from %%effectiveBlock%% until the\r\n   *  latest block or another GasCostPlugin supercedes that block number,\r\n   *  with the associated %%costs%%.\r\n   */\n  constructor(effectiveBlock, costs) {\n    if (effectiveBlock == null) {\n      effectiveBlock = 0;\n    }\n    super(`org.ethers.network.plugins.GasCost#${effectiveBlock || 0}`);\n    const props = {\n      effectiveBlock\n    };\n    function set(name, nullish) {\n      let value = (costs || {})[name];\n      if (value == null) {\n        value = nullish;\n      }\n      assertArgument(typeof value === \"number\", `invalud value for ${name}`, \"costs\", costs);\n      props[name] = value;\n    }\n    set(\"txBase\", 21000);\n    set(\"txCreate\", 32000);\n    set(\"txDataZero\", 4);\n    set(\"txDataNonzero\", 16);\n    set(\"txAccessListStorageKey\", 1900);\n    set(\"txAccessListAddress\", 2400);\n    defineProperties(this, props);\n  }\n  clone() {\n    return new GasCostPlugin(this.effectiveBlock, this);\n  }\n}\n/**\r\n *  An **EnsPlugin** allows a [[Network]] to specify the ENS Registry\r\n *  Contract address and the target network to use when using that\r\n *  contract.\r\n *\r\n *  Various testnets have their own instance of the contract to use, but\r\n *  in general, the mainnet instance supports multi-chain addresses and\r\n *  should be used.\r\n */\nexport class EnsPlugin extends NetworkPlugin {\n  /**\r\n   *  The ENS Registrty Contract address.\r\n   */\n  address;\n  /**\r\n   *  The chain ID that the ENS contract lives on.\r\n   */\n  targetNetwork;\n  /**\r\n   *  Creates a new **EnsPlugin** connected to %%address%% on the\r\n   *  %%targetNetwork%%. The default ENS address and mainnet is used\r\n   *  if unspecified.\r\n   */\n  constructor(address, targetNetwork) {\n    super(\"org.ethers.plugins.network.Ens\");\n    defineProperties(this, {\n      address: address || EnsAddress,\n      targetNetwork: targetNetwork == null ? 1 : targetNetwork\n    });\n  }\n  clone() {\n    return new EnsPlugin(this.address, this.targetNetwork);\n  }\n}\n/**\r\n *  A **FeeDataNetworkPlugin** allows a network to provide and alternate\r\n *  means to specify its fee data.\r\n *\r\n *  For example, a network which does not support [[link-eip-1559]] may\r\n *  choose to use a Gas Station site to approximate the gas price.\r\n */\nexport class FeeDataNetworkPlugin extends NetworkPlugin {\n  #feeDataFunc;\n  /**\r\n   *  The fee data function provided to the constructor.\r\n   */\n  get feeDataFunc() {\n    return this.#feeDataFunc;\n  }\n  /**\r\n   *  Creates a new **FeeDataNetworkPlugin**.\r\n   */\n  constructor(feeDataFunc) {\n    super(\"org.ethers.plugins.network.FeeData\");\n    this.#feeDataFunc = feeDataFunc;\n  }\n  /**\r\n   *  Resolves to the fee data.\r\n   */\n  async getFeeData(provider) {\n    return await this.#feeDataFunc(provider);\n  }\n  clone() {\n    return new FeeDataNetworkPlugin(this.#feeDataFunc);\n  }\n}\nexport class FetchUrlFeeDataNetworkPlugin extends NetworkPlugin {\n  #url;\n  #processFunc;\n  /**\r\n   *  The URL to initialize the FetchRequest with in %%processFunc%%.\r\n   */\n  get url() {\n    return this.#url;\n  }\n  /**\r\n   *  The callback to use when computing the FeeData.\r\n   */\n  get processFunc() {\n    return this.#processFunc;\n  }\n  /**\r\n   *  Creates a new **FetchUrlFeeDataNetworkPlugin** which will\r\n   *  be used when computing the fee data for the network.\r\n   */\n  constructor(url, processFunc) {\n    super(\"org.ethers.plugins.network.FetchUrlFeeDataPlugin\");\n    this.#url = url;\n    this.#processFunc = processFunc;\n  }\n  // We are immutable, so we can serve as our own clone\n  clone() {\n    return this;\n  }\n}\n/*\r\nexport class CustomBlockNetworkPlugin extends NetworkPlugin {\r\n    readonly #blockFunc: (provider: Provider, block: BlockParams<string>) => Block<string>;\r\n    readonly #blockWithTxsFunc: (provider: Provider, block: BlockParams<TransactionResponseParams>) => Block<TransactionResponse>;\r\n\r\n    constructor(blockFunc: (provider: Provider, block: BlockParams<string>) => Block<string>, blockWithTxsFunc: (provider: Provider, block: BlockParams<TransactionResponseParams>) => Block<TransactionResponse>) {\r\n        super(\"org.ethers.network-plugins.custom-block\");\r\n        this.#blockFunc = blockFunc;\r\n        this.#blockWithTxsFunc = blockWithTxsFunc;\r\n    }\r\n\r\n    async getBlock(provider: Provider, block: BlockParams<string>): Promise<Block<string>> {\r\n        return await this.#blockFunc(provider, block);\r\n    }\r\n\r\n    async getBlockions(provider: Provider, block: BlockParams<TransactionResponseParams>): Promise<Block<TransactionResponse>> {\r\n        return await this.#blockWithTxsFunc(provider, block);\r\n    }\r\n\r\n    clone(): CustomBlockNetworkPlugin {\r\n        return new CustomBlockNetworkPlugin(this.#blockFunc, this.#blockWithTxsFunc);\r\n    }\r\n}\r\n*/","map":{"version":3,"names":["defineProperties","assertArgument","EnsAddress","NetworkPlugin","name","constructor","clone","GasCostPlugin","effectiveBlock","txBase","txCreate","txDataZero","txDataNonzero","txAccessListStorageKey","txAccessListAddress","costs","props","set","nullish","value","EnsPlugin","address","targetNetwork","FeeDataNetworkPlugin","feeDataFunc","getFeeData","provider","FetchUrlFeeDataNetworkPlugin","url","processFunc"],"sources":["C:\\Users\\patil\\OneDrive\\Desktop\\Hack4Good\\Supply-Chain\\supply-chain\\node_modules\\ethers\\src.ts\\providers\\plugins-network.ts"],"sourcesContent":["import { defineProperties } from \"../utils/properties.js\";\r\n\r\nimport { assertArgument } from \"../utils/index.js\";\r\n\r\nimport type { FeeData, Provider } from \"./provider.js\";\r\nimport type { FetchRequest } from \"../utils/fetch.js\";\r\n\r\n\r\nconst EnsAddress = \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\";\r\n\r\n/**\r\n *  A **NetworkPlugin** provides additional functionality on a [[Network]].\r\n */\r\nexport class NetworkPlugin {\r\n    /**\r\n     *  The name of the plugin.\r\n     *\r\n     *  It is recommended to use reverse-domain-notation, which permits\r\n     *  unique names with a known authority as well as hierarchal entries.\r\n     */\r\n    readonly name!: string;\r\n\r\n    /**\r\n     *  Creates a new **NetworkPlugin**.\r\n     */\r\n    constructor(name: string) {\r\n        defineProperties<NetworkPlugin>(this, { name });\r\n    }\r\n\r\n    /**\r\n     *  Creates a copy of this plugin.\r\n     */\r\n    clone(): NetworkPlugin {\r\n        return new NetworkPlugin(this.name);\r\n    }\r\n\r\n//    validate(network: Network): NetworkPlugin {\r\n//        return this;\r\n//    }\r\n}\r\n\r\n\r\n/**\r\n *  The gas cost parameters for a [[GasCostPlugin]].\r\n */\r\nexport type GasCostParameters = {\r\n    /**\r\n     *  The transactions base fee.\r\n     */\r\n    txBase?: number;\r\n\r\n    /**\r\n     *  The fee for creating a new account.\r\n     */\r\n    txCreate?: number;\r\n\r\n    /**\r\n     *  The fee per zero-byte in the data.\r\n     */\r\n    txDataZero?: number;\r\n\r\n    /**\r\n     *  The fee per non-zero-byte in the data.\r\n     */\r\n    txDataNonzero?: number;\r\n\r\n    /**\r\n     *  The fee per storage key in the [[link-eip-2930]] access list.\r\n     */\r\n    txAccessListStorageKey?: number;\r\n\r\n    /**\r\n     *  The fee per address in the [[link-eip-2930]] access list.\r\n     */\r\n    txAccessListAddress?: number;\r\n};\r\n\r\n/**\r\n *  A **GasCostPlugin** allows a network to provide alternative values when\r\n *  computing the intrinsic gas required for a transaction.\r\n */\r\nexport class GasCostPlugin extends NetworkPlugin implements GasCostParameters {\r\n    /**\r\n     *  The block number to treat these values as valid from.\r\n     *\r\n     *  This allows a hardfork to have updated values included as well as\r\n     *  mulutiple hardforks to be supported.\r\n     */\r\n    readonly effectiveBlock!: number;\r\n\r\n    /**\r\n     *  The transactions base fee.\r\n     */\r\n    readonly txBase!: number;\r\n\r\n    /**\r\n     *  The fee for creating a new account.\r\n     */\r\n    readonly txCreate!: number;\r\n\r\n    /**\r\n     *  The fee per zero-byte in the data.\r\n     */\r\n    readonly txDataZero!: number;\r\n\r\n    /**\r\n     *  The fee per non-zero-byte in the data.\r\n     */\r\n    readonly txDataNonzero!: number;\r\n\r\n    /**\r\n     *  The fee per storage key in the [[link-eip-2930]] access list.\r\n     */\r\n    readonly txAccessListStorageKey!: number;\r\n\r\n    /**\r\n     *  The fee per address in the [[link-eip-2930]] access list.\r\n     */\r\n    readonly txAccessListAddress!: number;\r\n\r\n\r\n    /**\r\n     *  Creates a new GasCostPlugin from %%effectiveBlock%% until the\r\n     *  latest block or another GasCostPlugin supercedes that block number,\r\n     *  with the associated %%costs%%.\r\n     */\r\n    constructor(effectiveBlock?: number, costs?: GasCostParameters) {\r\n        if (effectiveBlock == null) { effectiveBlock = 0; }\r\n        super(`org.ethers.network.plugins.GasCost#${ (effectiveBlock || 0) }`);\r\n\r\n        const props: Record<string, number> = { effectiveBlock };\r\n        function set(name: keyof GasCostParameters, nullish: number): void {\r\n            let value = (costs || { })[name];\r\n            if (value == null) { value = nullish; }\r\n            assertArgument(typeof(value) === \"number\", `invalud value for ${ name }`, \"costs\", costs);\r\n            props[name] = value;\r\n        }\r\n\r\n        set(\"txBase\", 21000);\r\n        set(\"txCreate\", 32000);\r\n        set(\"txDataZero\", 4);\r\n        set(\"txDataNonzero\", 16);\r\n        set(\"txAccessListStorageKey\", 1900);\r\n        set(\"txAccessListAddress\", 2400);\r\n\r\n        defineProperties<GasCostPlugin>(this, props);\r\n    }\r\n\r\n    clone(): GasCostPlugin {\r\n        return new GasCostPlugin(this.effectiveBlock, this);\r\n    }\r\n}\r\n\r\n/**\r\n *  An **EnsPlugin** allows a [[Network]] to specify the ENS Registry\r\n *  Contract address and the target network to use when using that\r\n *  contract.\r\n *\r\n *  Various testnets have their own instance of the contract to use, but\r\n *  in general, the mainnet instance supports multi-chain addresses and\r\n *  should be used.\r\n */\r\nexport class EnsPlugin extends NetworkPlugin {\r\n\r\n    /**\r\n     *  The ENS Registrty Contract address.\r\n     */\r\n    readonly address!: string;\r\n\r\n    /**\r\n     *  The chain ID that the ENS contract lives on.\r\n     */\r\n    readonly targetNetwork!: number;\r\n\r\n    /**\r\n     *  Creates a new **EnsPlugin** connected to %%address%% on the\r\n     *  %%targetNetwork%%. The default ENS address and mainnet is used\r\n     *  if unspecified.\r\n     */\r\n    constructor(address?: null | string, targetNetwork?: null | number) {\r\n        super(\"org.ethers.plugins.network.Ens\");\r\n        defineProperties<EnsPlugin>(this, {\r\n            address: (address || EnsAddress),\r\n            targetNetwork: ((targetNetwork == null) ? 1: targetNetwork)\r\n        });\r\n    }\r\n\r\n    clone(): EnsPlugin {\r\n        return new EnsPlugin(this.address, this.targetNetwork);\r\n    }\r\n}\r\n\r\n/**\r\n *  A **FeeDataNetworkPlugin** allows a network to provide and alternate\r\n *  means to specify its fee data.\r\n *\r\n *  For example, a network which does not support [[link-eip-1559]] may\r\n *  choose to use a Gas Station site to approximate the gas price.\r\n */\r\nexport class FeeDataNetworkPlugin extends NetworkPlugin {\r\n    readonly #feeDataFunc: (provider: Provider) => Promise<FeeData>;\r\n\r\n    /**\r\n     *  The fee data function provided to the constructor.\r\n     */\r\n    get feeDataFunc(): (provider: Provider) => Promise<FeeData> {\r\n        return this.#feeDataFunc;\r\n    }\r\n\r\n    /**\r\n     *  Creates a new **FeeDataNetworkPlugin**.\r\n     */\r\n    constructor(feeDataFunc: (provider: Provider) => Promise<FeeData>) {\r\n        super(\"org.ethers.plugins.network.FeeData\");\r\n        this.#feeDataFunc = feeDataFunc;\r\n    }\r\n\r\n    /**\r\n     *  Resolves to the fee data.\r\n     */\r\n    async getFeeData(provider: Provider): Promise<FeeData> {\r\n        return await this.#feeDataFunc(provider);\r\n    }\r\n\r\n    clone(): FeeDataNetworkPlugin {\r\n        return new FeeDataNetworkPlugin(this.#feeDataFunc);\r\n    }\r\n}\r\n\r\nexport class FetchUrlFeeDataNetworkPlugin extends NetworkPlugin {\r\n    readonly #url: string;\r\n    readonly #processFunc: (f: () => Promise<FeeData>, p: Provider, r: FetchRequest) => Promise<{ gasPrice?: null | bigint, maxFeePerGas?: null | bigint, maxPriorityFeePerGas?: null | bigint }>;\r\n\r\n    /**\r\n     *  The URL to initialize the FetchRequest with in %%processFunc%%.\r\n     */\r\n    get url(): string { return this.#url; }\r\n\r\n    /**\r\n     *  The callback to use when computing the FeeData.\r\n     */\r\n    get processFunc(): (f: () => Promise<FeeData>, p: Provider, r: FetchRequest) => Promise<{ gasPrice?: null | bigint, maxFeePerGas?: null | bigint, maxPriorityFeePerGas?: null | bigint }> { return this.#processFunc; }\r\n\r\n    /**\r\n     *  Creates a new **FetchUrlFeeDataNetworkPlugin** which will\r\n     *  be used when computing the fee data for the network.\r\n     */\r\n    constructor(url: string, processFunc: (f: () => Promise<FeeData>, p: Provider, r: FetchRequest) => Promise<{ gasPrice?: null | bigint, maxFeePerGas?: null | bigint, maxPriorityFeePerGas?: null | bigint }>) {\r\n        super(\"org.ethers.plugins.network.FetchUrlFeeDataPlugin\");\r\n        this.#url = url;\r\n        this.#processFunc = processFunc;\r\n    }\r\n\r\n    // We are immutable, so we can serve as our own clone\r\n    clone(): FetchUrlFeeDataNetworkPlugin { return this; }\r\n}\r\n\r\n/*\r\nexport class CustomBlockNetworkPlugin extends NetworkPlugin {\r\n    readonly #blockFunc: (provider: Provider, block: BlockParams<string>) => Block<string>;\r\n    readonly #blockWithTxsFunc: (provider: Provider, block: BlockParams<TransactionResponseParams>) => Block<TransactionResponse>;\r\n\r\n    constructor(blockFunc: (provider: Provider, block: BlockParams<string>) => Block<string>, blockWithTxsFunc: (provider: Provider, block: BlockParams<TransactionResponseParams>) => Block<TransactionResponse>) {\r\n        super(\"org.ethers.network-plugins.custom-block\");\r\n        this.#blockFunc = blockFunc;\r\n        this.#blockWithTxsFunc = blockWithTxsFunc;\r\n    }\r\n\r\n    async getBlock(provider: Provider, block: BlockParams<string>): Promise<Block<string>> {\r\n        return await this.#blockFunc(provider, block);\r\n    }\r\n\r\n    async getBlockions(provider: Provider, block: BlockParams<TransactionResponseParams>): Promise<Block<TransactionResponse>> {\r\n        return await this.#blockWithTxsFunc(provider, block);\r\n    }\r\n\r\n    clone(): CustomBlockNetworkPlugin {\r\n        return new CustomBlockNetworkPlugin(this.#blockFunc, this.#blockWithTxsFunc);\r\n    }\r\n}\r\n*/\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}