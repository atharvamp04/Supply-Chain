{"ast":null,"code":"/**\r\n *  Addresses are a fundamental part of interacting with Ethereum. They\r\n *  represent the gloabal identity of Externally Owned Accounts (accounts\r\n *  backed by a private key) and contracts.\r\n *\r\n *  The Ethereum Naming Service (ENS) provides an interconnected ecosystem\r\n *  of contracts, standards and libraries which enable looking up an\r\n *  address for an ENS name.\r\n *\r\n *  These functions help convert between various formats, validate\r\n *  addresses and safely resolve ENS names.\r\n *\r\n *  @_section: api/address:Addresses  [about-addresses]\r\n */\nnull;\nexport { getAddress, getIcapAddress } from \"./address.js\";\nexport { getCreateAddress, getCreate2Address } from \"./contract-address.js\";\nexport { isAddressable, isAddress, resolveAddress } from \"./checks.js\";","map":{"version":3,"names":["getAddress","getIcapAddress","getCreateAddress","getCreate2Address","isAddressable","isAddress","resolveAddress"],"sources":["C:\\Users\\patil\\OneDrive\\Desktop\\Hack4Good\\Supply-Chain\\supply-chain\\node_modules\\ethers\\src.ts\\address\\index.ts"],"sourcesContent":["/**\r\n *  Addresses are a fundamental part of interacting with Ethereum. They\r\n *  represent the gloabal identity of Externally Owned Accounts (accounts\r\n *  backed by a private key) and contracts.\r\n *\r\n *  The Ethereum Naming Service (ENS) provides an interconnected ecosystem\r\n *  of contracts, standards and libraries which enable looking up an\r\n *  address for an ENS name.\r\n *\r\n *  These functions help convert between various formats, validate\r\n *  addresses and safely resolve ENS names.\r\n *\r\n *  @_section: api/address:Addresses  [about-addresses]\r\n */\r\n\r\nnull;\r\n\r\n/**\r\n *  An interface for objects which have an address, and can\r\n *  resolve it asyncronously.\r\n *\r\n *  This allows objects such as [[Signer]] or [[Contract]] to\r\n *  be used most places an address can be, for example getting\r\n *  the [balance](Provider-getBalance).\r\n */\r\nexport interface Addressable {\r\n    /**\r\n     *  Get the object address.\r\n     */\r\n    getAddress(): Promise<string>;\r\n}\r\n\r\n/**\r\n *  Anything that can be used to return or resolve an address.\r\n */\r\nexport type AddressLike = string | Promise<string> | Addressable;\r\n\r\n/**\r\n *  An interface for any object which can resolve an ENS name.\r\n */\r\nexport interface NameResolver {\r\n    /**\r\n     *  Resolve to the address for the ENS %%name%%.\r\n     *\r\n     *  Resolves to ``null`` if the name is unconfigued. Use\r\n     *  [[resolveAddress]] (passing this object as %%resolver%%) to\r\n     *  throw for names that are unconfigured.\r\n     */\r\n    resolveName(name: string): Promise<null | string>;\r\n}\r\n\r\nexport { getAddress, getIcapAddress } from \"./address.js\";\r\n\r\nexport { getCreateAddress, getCreate2Address } from \"./contract-address.js\";\r\n\r\n\r\nexport { isAddressable, isAddress, resolveAddress } from \"./checks.js\";\r\n"],"mappings":"AAAA;;;;;;;;;;;;;;AAeA,IAAI;AAoCJ,SAASA,UAAU,EAAEC,cAAc,QAAQ,cAAc;AAEzD,SAASC,gBAAgB,EAAEC,iBAAiB,QAAQ,uBAAuB;AAG3E,SAASC,aAAa,EAAEC,SAAS,EAAEC,cAAc,QAAQ,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}