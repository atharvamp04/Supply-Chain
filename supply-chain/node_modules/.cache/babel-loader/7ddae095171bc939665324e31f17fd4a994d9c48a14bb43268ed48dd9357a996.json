{"ast":null,"code":"/**\r\n *  A **Network** encapsulates the various properties required to\r\n *  interact with a specific chain.\r\n *\r\n *  @_subsection: api/providers:Networks  [networks]\r\n */\nimport { accessListify } from \"../transaction/index.js\";\nimport { getBigInt, assert, assertArgument } from \"../utils/index.js\";\nimport { EnsPlugin, FetchUrlFeeDataNetworkPlugin, GasCostPlugin } from \"./plugins-network.js\";\n/* * * *\r\n// Networks which operation against an L2 can use this plugin to\r\n// specify how to access L1, for the purpose of resolving ENS,\r\n// for example.\r\nexport class LayerOneConnectionPlugin extends NetworkPlugin {\r\n    readonly provider!: Provider;\r\n// @TODO: Rename to ChainAccess and allow for connecting to any chain\r\n    constructor(provider: Provider) {\r\n        super(\"org.ethers.plugins.layer-one-connection\");\r\n        defineProperties<LayerOneConnectionPlugin>(this, { provider });\r\n    }\r\n\r\n    clone(): LayerOneConnectionPlugin {\r\n        return new LayerOneConnectionPlugin(this.provider);\r\n    }\r\n}\r\n*/\nconst Networks = new Map();\n/**\r\n *  A **Network** provides access to a chain's properties and allows\r\n *  for plug-ins to extend functionality.\r\n */\nexport class Network {\n  #name;\n  #chainId;\n  #plugins;\n  /**\r\n   *  Creates a new **Network** for %%name%% and %%chainId%%.\r\n   */\n  constructor(name, chainId) {\n    this.#name = name;\n    this.#chainId = getBigInt(chainId);\n    this.#plugins = new Map();\n  }\n  /**\r\n   *  Returns a JSON-compatible representation of a Network.\r\n   */\n  toJSON() {\n    return {\n      name: this.name,\n      chainId: String(this.chainId)\n    };\n  }\n  /**\r\n   *  The network common name.\r\n   *\r\n   *  This is the canonical name, as networks migh have multiple\r\n   *  names.\r\n   */\n  get name() {\n    return this.#name;\n  }\n  set name(value) {\n    this.#name = value;\n  }\n  /**\r\n   *  The network chain ID.\r\n   */\n  get chainId() {\n    return this.#chainId;\n  }\n  set chainId(value) {\n    this.#chainId = getBigInt(value, \"chainId\");\n  }\n  /**\r\n   *  Returns true if %%other%% matches this network. Any chain ID\r\n   *  must match, and if no chain ID is present, the name must match.\r\n   *\r\n   *  This method does not currently check for additional properties,\r\n   *  such as ENS address or plug-in compatibility.\r\n   */\n  matches(other) {\n    if (other == null) {\n      return false;\n    }\n    if (typeof other === \"string\") {\n      try {\n        return this.chainId === getBigInt(other);\n      } catch (error) {}\n      return this.name === other;\n    }\n    if (typeof other === \"number\" || typeof other === \"bigint\") {\n      try {\n        return this.chainId === getBigInt(other);\n      } catch (error) {}\n      return false;\n    }\n    if (typeof other === \"object\") {\n      if (other.chainId != null) {\n        try {\n          return this.chainId === getBigInt(other.chainId);\n        } catch (error) {}\n        return false;\n      }\n      if (other.name != null) {\n        return this.name === other.name;\n      }\n      return false;\n    }\n    return false;\n  }\n  /**\r\n   *  Returns the list of plugins currently attached to this Network.\r\n   */\n  get plugins() {\n    return Array.from(this.#plugins.values());\n  }\n  /**\r\n   *  Attach a new %%plugin%% to this Network. The network name\r\n   *  must be unique, excluding any fragment.\r\n   */\n  attachPlugin(plugin) {\n    if (this.#plugins.get(plugin.name)) {\n      throw new Error(`cannot replace existing plugin: ${plugin.name} `);\n    }\n    this.#plugins.set(plugin.name, plugin.clone());\n    return this;\n  }\n  /**\r\n   *  Return the plugin, if any, matching %%name%% exactly. Plugins\r\n   *  with fragments will not be returned unless %%name%% includes\r\n   *  a fragment.\r\n   */\n  getPlugin(name) {\n    return this.#plugins.get(name) || null;\n  }\n  /**\r\n   *  Gets a list of all plugins that match %%name%%, with otr without\r\n   *  a fragment.\r\n   */\n  getPlugins(basename) {\n    return this.plugins.filter(p => p.name.split(\"#\")[0] === basename);\n  }\n  /**\r\n   *  Create a copy of this Network.\r\n   */\n  clone() {\n    const clone = new Network(this.name, this.chainId);\n    this.plugins.forEach(plugin => {\n      clone.attachPlugin(plugin.clone());\n    });\n    return clone;\n  }\n  /**\r\n   *  Compute the intrinsic gas required for a transaction.\r\n   *\r\n   *  A GasCostPlugin can be attached to override the default\r\n   *  values.\r\n   */\n  computeIntrinsicGas(tx) {\n    const costs = this.getPlugin(\"org.ethers.plugins.network.GasCost\") || new GasCostPlugin();\n    let gas = costs.txBase;\n    if (tx.to == null) {\n      gas += costs.txCreate;\n    }\n    if (tx.data) {\n      for (let i = 2; i < tx.data.length; i += 2) {\n        if (tx.data.substring(i, i + 2) === \"00\") {\n          gas += costs.txDataZero;\n        } else {\n          gas += costs.txDataNonzero;\n        }\n      }\n    }\n    if (tx.accessList) {\n      const accessList = accessListify(tx.accessList);\n      for (const addr in accessList) {\n        gas += costs.txAccessListAddress + costs.txAccessListStorageKey * accessList[addr].storageKeys.length;\n      }\n    }\n    return gas;\n  }\n  /**\r\n   *  Returns a new Network for the %%network%% name or chainId.\r\n   */\n  static from(network) {\n    injectCommonNetworks();\n    // Default network\n    if (network == null) {\n      return Network.from(\"mainnet\");\n    }\n    // Canonical name or chain ID\n    if (typeof network === \"number\") {\n      network = BigInt(network);\n    }\n    if (typeof network === \"string\" || typeof network === \"bigint\") {\n      const networkFunc = Networks.get(network);\n      if (networkFunc) {\n        return networkFunc();\n      }\n      if (typeof network === \"bigint\") {\n        return new Network(\"unknown\", network);\n      }\n      assertArgument(false, \"unknown network\", \"network\", network);\n    }\n    // Clonable with network-like abilities\n    if (typeof network.clone === \"function\") {\n      const clone = network.clone();\n      //if (typeof(network.name) !== \"string\" || typeof(network.chainId) !== \"number\") {\n      //}\n      return clone;\n    }\n    // Networkish\n    if (typeof network === \"object\") {\n      assertArgument(typeof network.name === \"string\" && typeof network.chainId === \"number\", \"invalid network object name or chainId\", \"network\", network);\n      const custom = new Network(network.name, network.chainId);\n      if (network.ensAddress || network.ensNetwork != null) {\n        custom.attachPlugin(new EnsPlugin(network.ensAddress, network.ensNetwork));\n      }\n      //if ((<any>network).layerOneConnection) {\n      //    custom.attachPlugin(new LayerOneConnectionPlugin((<any>network).layerOneConnection));\n      //}\n      return custom;\n    }\n    assertArgument(false, \"invalid network\", \"network\", network);\n  }\n  /**\r\n   *  Register %%nameOrChainId%% with a function which returns\r\n   *  an instance of a Network representing that chain.\r\n   */\n  static register(nameOrChainId, networkFunc) {\n    if (typeof nameOrChainId === \"number\") {\n      nameOrChainId = BigInt(nameOrChainId);\n    }\n    const existing = Networks.get(nameOrChainId);\n    if (existing) {\n      assertArgument(false, `conflicting network for ${JSON.stringify(existing.name)}`, \"nameOrChainId\", nameOrChainId);\n    }\n    Networks.set(nameOrChainId, networkFunc);\n  }\n}\n// We don't want to bring in formatUnits because it is backed by\n// FixedNumber and we want to keep Networks tiny. The values\n// included by the Gas Stations are also IEEE 754 with lots of\n// rounding issues and exceed the strict checks formatUnits has.\nfunction parseUnits(_value, decimals) {\n  const value = String(_value);\n  if (!value.match(/^[0-9.]+$/)) {\n    throw new Error(`invalid gwei value: ${_value}`);\n  }\n  // Break into [ whole, fraction ]\n  const comps = value.split(\".\");\n  if (comps.length === 1) {\n    comps.push(\"\");\n  }\n  // More than 1 decimal point or too many fractional positions\n  if (comps.length !== 2) {\n    throw new Error(`invalid gwei value: ${_value}`);\n  }\n  // Pad the fraction to 9 decimalplaces\n  while (comps[1].length < decimals) {\n    comps[1] += \"0\";\n  }\n  // Too many decimals and some non-zero ending, take the ceiling\n  if (comps[1].length > 9) {\n    let frac = BigInt(comps[1].substring(0, 9));\n    if (!comps[1].substring(9).match(/^0+$/)) {\n      frac++;\n    }\n    comps[1] = frac.toString();\n  }\n  return BigInt(comps[0] + comps[1]);\n}\n// Used by Polygon to use a gas station for fee data\nfunction getGasStationPlugin(url) {\n  return new FetchUrlFeeDataNetworkPlugin(url, async (fetchFeeData, provider, request) => {\n    // Prevent Cloudflare from blocking our request in node.js\n    request.setHeader(\"User-Agent\", \"ethers\");\n    let response;\n    try {\n      const [_response, _feeData] = await Promise.all([request.send(), fetchFeeData()]);\n      response = _response;\n      const payload = response.bodyJson.standard;\n      const feeData = {\n        gasPrice: _feeData.gasPrice,\n        maxFeePerGas: parseUnits(payload.maxFee, 9),\n        maxPriorityFeePerGas: parseUnits(payload.maxPriorityFee, 9)\n      };\n      return feeData;\n    } catch (error) {\n      assert(false, `error encountered with polygon gas station (${JSON.stringify(request.url)})`, \"SERVER_ERROR\", {\n        request,\n        response,\n        error\n      });\n    }\n  });\n}\n// See: https://chainlist.org\nlet injected = false;\nfunction injectCommonNetworks() {\n  if (injected) {\n    return;\n  }\n  injected = true;\n  /// Register popular Ethereum networks\n  function registerEth(name, chainId, options) {\n    const func = function () {\n      const network = new Network(name, chainId);\n      // We use 0 to disable ENS\n      if (options.ensNetwork != null) {\n        network.attachPlugin(new EnsPlugin(null, options.ensNetwork));\n      }\n      network.attachPlugin(new GasCostPlugin());\n      (options.plugins || []).forEach(plugin => {\n        network.attachPlugin(plugin);\n      });\n      return network;\n    };\n    // Register the network by name and chain ID\n    Network.register(name, func);\n    Network.register(chainId, func);\n    if (options.altNames) {\n      options.altNames.forEach(name => {\n        Network.register(name, func);\n      });\n    }\n  }\n  registerEth(\"mainnet\", 1, {\n    ensNetwork: 1,\n    altNames: [\"homestead\"]\n  });\n  registerEth(\"ropsten\", 3, {\n    ensNetwork: 3\n  });\n  registerEth(\"rinkeby\", 4, {\n    ensNetwork: 4\n  });\n  registerEth(\"goerli\", 5, {\n    ensNetwork: 5\n  });\n  registerEth(\"kovan\", 42, {\n    ensNetwork: 42\n  });\n  registerEth(\"sepolia\", 11155111, {\n    ensNetwork: 11155111\n  });\n  registerEth(\"holesky\", 17000, {\n    ensNetwork: 17000\n  });\n  registerEth(\"classic\", 61, {});\n  registerEth(\"classicKotti\", 6, {});\n  registerEth(\"arbitrum\", 42161, {\n    ensNetwork: 1\n  });\n  registerEth(\"arbitrum-goerli\", 421613, {});\n  registerEth(\"arbitrum-sepolia\", 421614, {});\n  registerEth(\"base\", 8453, {\n    ensNetwork: 1\n  });\n  registerEth(\"base-goerli\", 84531, {});\n  registerEth(\"base-sepolia\", 84532, {});\n  registerEth(\"bnb\", 56, {\n    ensNetwork: 1\n  });\n  registerEth(\"bnbt\", 97, {});\n  registerEth(\"linea\", 59144, {\n    ensNetwork: 1\n  });\n  registerEth(\"linea-goerli\", 59140, {});\n  registerEth(\"linea-sepolia\", 59141, {});\n  registerEth(\"matic\", 137, {\n    ensNetwork: 1,\n    plugins: [getGasStationPlugin(\"https:/\\/gasstation.polygon.technology/v2\")]\n  });\n  registerEth(\"matic-amoy\", 80002, {});\n  registerEth(\"matic-mumbai\", 80001, {\n    altNames: [\"maticMumbai\", \"maticmum\"],\n    plugins: [getGasStationPlugin(\"https:/\\/gasstation-testnet.polygon.technology/v2\")]\n  });\n  registerEth(\"optimism\", 10, {\n    ensNetwork: 1,\n    plugins: []\n  });\n  registerEth(\"optimism-goerli\", 420, {});\n  registerEth(\"optimism-sepolia\", 11155420, {});\n  registerEth(\"xdai\", 100, {\n    ensNetwork: 1\n  });\n}","map":{"version":3,"names":["accessListify","getBigInt","assert","assertArgument","EnsPlugin","FetchUrlFeeDataNetworkPlugin","GasCostPlugin","Networks","Map","Network","name","chainId","plugins","constructor","toJSON","String","value","matches","other","error","Array","from","values","attachPlugin","plugin","get","Error","set","clone","getPlugin","getPlugins","basename","filter","p","split","forEach","computeIntrinsicGas","tx","costs","gas","txBase","to","txCreate","data","i","length","substring","txDataZero","txDataNonzero","accessList","addr","txAccessListAddress","txAccessListStorageKey","storageKeys","network","injectCommonNetworks","BigInt","networkFunc","custom","ensAddress","ensNetwork","register","nameOrChainId","existing","JSON","stringify","parseUnits","_value","decimals","match","comps","push","frac","toString","getGasStationPlugin","url","fetchFeeData","provider","request","setHeader","response","_response","_feeData","Promise","all","send","payload","bodyJson","standard","feeData","gasPrice","maxFeePerGas","maxFee","maxPriorityFeePerGas","maxPriorityFee","injected","registerEth","options","func","altNames"],"sources":["C:\\Users\\patil\\OneDrive\\Desktop\\Hack4Good\\Supply-Chain\\supply-chain\\node_modules\\ethers\\src.ts\\providers\\network.ts"],"sourcesContent":["/**\r\n *  A **Network** encapsulates the various properties required to\r\n *  interact with a specific chain.\r\n *\r\n *  @_subsection: api/providers:Networks  [networks]\r\n */\r\n\r\nimport { accessListify } from \"../transaction/index.js\";\r\nimport { getBigInt, assert, assertArgument } from \"../utils/index.js\";\r\n\r\nimport {\r\n    EnsPlugin, FetchUrlFeeDataNetworkPlugin, GasCostPlugin\r\n} from \"./plugins-network.js\";\r\n\r\nimport type { BigNumberish } from \"../utils/index.js\";\r\nimport type { TransactionLike } from \"../transaction/index.js\";\r\n\r\nimport type { NetworkPlugin } from \"./plugins-network.js\";\r\n\r\n\r\n/**\r\n *  A Networkish can be used to allude to a Network, by specifing:\r\n *  - a [[Network]] object\r\n *  - a well-known (or registered) network name\r\n *  - a well-known (or registered) chain ID\r\n *  - an object with sufficient details to describe a network\r\n */\r\nexport type Networkish = Network | number | bigint | string | {\r\n    name?: string,\r\n    chainId?: number,\r\n    //layerOneConnection?: Provider,\r\n    ensAddress?: string,\r\n    ensNetwork?: number\r\n};\r\n\r\n\r\n\r\n\r\n/* * * *\r\n// Networks which operation against an L2 can use this plugin to\r\n// specify how to access L1, for the purpose of resolving ENS,\r\n// for example.\r\nexport class LayerOneConnectionPlugin extends NetworkPlugin {\r\n    readonly provider!: Provider;\r\n// @TODO: Rename to ChainAccess and allow for connecting to any chain\r\n    constructor(provider: Provider) {\r\n        super(\"org.ethers.plugins.layer-one-connection\");\r\n        defineProperties<LayerOneConnectionPlugin>(this, { provider });\r\n    }\r\n\r\n    clone(): LayerOneConnectionPlugin {\r\n        return new LayerOneConnectionPlugin(this.provider);\r\n    }\r\n}\r\n*/\r\n\r\n\r\nconst Networks: Map<string | bigint, () => Network> = new Map();\r\n\r\n\r\n/**\r\n *  A **Network** provides access to a chain's properties and allows\r\n *  for plug-ins to extend functionality.\r\n */\r\nexport class Network {\r\n    #name: string;\r\n    #chainId: bigint;\r\n\r\n    #plugins: Map<string, NetworkPlugin>;\r\n\r\n    /**\r\n     *  Creates a new **Network** for %%name%% and %%chainId%%.\r\n     */\r\n    constructor(name: string, chainId: BigNumberish) {\r\n        this.#name = name;\r\n        this.#chainId = getBigInt(chainId);\r\n        this.#plugins = new Map();\r\n    }\r\n\r\n    /**\r\n     *  Returns a JSON-compatible representation of a Network.\r\n     */\r\n    toJSON(): any {\r\n        return { name: this.name, chainId: String(this.chainId) };\r\n    }\r\n\r\n    /**\r\n     *  The network common name.\r\n     *\r\n     *  This is the canonical name, as networks migh have multiple\r\n     *  names.\r\n     */\r\n    get name(): string { return this.#name; }\r\n    set name(value: string) { this.#name =  value; }\r\n\r\n    /**\r\n     *  The network chain ID.\r\n     */\r\n    get chainId(): bigint { return this.#chainId; }\r\n    set chainId(value: BigNumberish) { this.#chainId = getBigInt(value, \"chainId\"); }\r\n\r\n    /**\r\n     *  Returns true if %%other%% matches this network. Any chain ID\r\n     *  must match, and if no chain ID is present, the name must match.\r\n     *\r\n     *  This method does not currently check for additional properties,\r\n     *  such as ENS address or plug-in compatibility.\r\n     */\r\n    matches(other: Networkish): boolean {\r\n        if (other == null) { return false; }\r\n\r\n        if (typeof(other) === \"string\") {\r\n            try {\r\n                return (this.chainId === getBigInt(other));\r\n            } catch (error) { }\r\n            return (this.name === other);\r\n        }\r\n\r\n        if (typeof(other) === \"number\" || typeof(other) === \"bigint\") {\r\n            try {\r\n                return (this.chainId === getBigInt(other));\r\n            } catch (error) { }\r\n            return false;\r\n        }\r\n\r\n        if (typeof(other) === \"object\") {\r\n            if (other.chainId != null) {\r\n                try {\r\n                    return (this.chainId === getBigInt(other.chainId));\r\n                } catch (error) { }\r\n                return false;\r\n            }\r\n            if (other.name != null) {\r\n                return (this.name === other.name);\r\n            }\r\n            return false;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     *  Returns the list of plugins currently attached to this Network.\r\n     */\r\n    get plugins(): Array<NetworkPlugin> {\r\n        return Array.from(this.#plugins.values());\r\n    }\r\n\r\n    /**\r\n     *  Attach a new %%plugin%% to this Network. The network name\r\n     *  must be unique, excluding any fragment.\r\n     */\r\n    attachPlugin(plugin: NetworkPlugin): this {\r\n        if (this.#plugins.get(plugin.name)) {\r\n            throw new Error(`cannot replace existing plugin: ${ plugin.name } `);\r\n        }\r\n        this.#plugins.set(plugin.name, plugin.clone());\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     *  Return the plugin, if any, matching %%name%% exactly. Plugins\r\n     *  with fragments will not be returned unless %%name%% includes\r\n     *  a fragment.\r\n     */\r\n    getPlugin<T extends NetworkPlugin = NetworkPlugin>(name: string): null | T {\r\n        return <T>(this.#plugins.get(name)) || null;\r\n    }\r\n\r\n    /**\r\n     *  Gets a list of all plugins that match %%name%%, with otr without\r\n     *  a fragment.\r\n     */\r\n    getPlugins<T extends NetworkPlugin = NetworkPlugin>(basename: string): Array<T> {\r\n        return <Array<T>>(this.plugins.filter((p) => (p.name.split(\"#\")[0] === basename)));\r\n    }\r\n\r\n    /**\r\n     *  Create a copy of this Network.\r\n     */\r\n    clone(): Network {\r\n        const clone = new Network(this.name, this.chainId);\r\n        this.plugins.forEach((plugin) => {\r\n            clone.attachPlugin(plugin.clone());\r\n        });\r\n        return clone;\r\n    }\r\n\r\n    /**\r\n     *  Compute the intrinsic gas required for a transaction.\r\n     *\r\n     *  A GasCostPlugin can be attached to override the default\r\n     *  values.\r\n     */\r\n    computeIntrinsicGas(tx: TransactionLike): number {\r\n        const costs = this.getPlugin<GasCostPlugin>(\"org.ethers.plugins.network.GasCost\") || (new GasCostPlugin());\r\n\r\n        let gas = costs.txBase;\r\n        if (tx.to == null) { gas += costs.txCreate; }\r\n        if (tx.data) {\r\n            for (let i = 2; i < tx.data.length; i += 2) {\r\n                if (tx.data.substring(i, i + 2) === \"00\") {\r\n                    gas += costs.txDataZero;\r\n                } else {\r\n                    gas += costs.txDataNonzero;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (tx.accessList) {\r\n            const accessList = accessListify(tx.accessList);\r\n            for (const addr in accessList) {\r\n                gas += costs.txAccessListAddress + costs.txAccessListStorageKey * accessList[addr].storageKeys.length;\r\n            }\r\n        }\r\n\r\n        return gas;\r\n    }\r\n\r\n    /**\r\n     *  Returns a new Network for the %%network%% name or chainId.\r\n     */\r\n    static from(network?: Networkish): Network {\r\n        injectCommonNetworks();\r\n\r\n        // Default network\r\n        if (network == null) { return Network.from(\"mainnet\"); }\r\n\r\n        // Canonical name or chain ID\r\n        if (typeof(network) === \"number\") { network = BigInt(network); }\r\n        if (typeof(network) === \"string\" || typeof(network) === \"bigint\") {\r\n            const networkFunc = Networks.get(network);\r\n            if (networkFunc) { return networkFunc(); }\r\n            if (typeof(network) === \"bigint\") {\r\n                return new Network(\"unknown\", network);\r\n            }\r\n\r\n            assertArgument(false, \"unknown network\", \"network\", network);\r\n        }\r\n\r\n        // Clonable with network-like abilities\r\n        if (typeof((<Network>network).clone) === \"function\") {\r\n            const clone = (<Network>network).clone();\r\n            //if (typeof(network.name) !== \"string\" || typeof(network.chainId) !== \"number\") {\r\n            //}\r\n            return clone;\r\n        }\r\n\r\n        // Networkish\r\n        if (typeof(network) === \"object\") {\r\n            assertArgument(typeof(network.name) === \"string\" && typeof(network.chainId) === \"number\",\r\n                \"invalid network object name or chainId\", \"network\", network);\r\n\r\n            const custom = new Network(<string>(network.name), <number>(network.chainId));\r\n\r\n            if ((<any>network).ensAddress || (<any>network).ensNetwork != null) {\r\n                custom.attachPlugin(new EnsPlugin((<any>network).ensAddress, (<any>network).ensNetwork));\r\n            }\r\n\r\n            //if ((<any>network).layerOneConnection) {\r\n            //    custom.attachPlugin(new LayerOneConnectionPlugin((<any>network).layerOneConnection));\r\n            //}\r\n\r\n            return custom;\r\n        }\r\n\r\n        assertArgument(false, \"invalid network\", \"network\", network);\r\n    }\r\n\r\n    /**\r\n     *  Register %%nameOrChainId%% with a function which returns\r\n     *  an instance of a Network representing that chain.\r\n     */\r\n    static register(nameOrChainId: string | number | bigint, networkFunc: () => Network): void {\r\n        if (typeof(nameOrChainId) === \"number\") { nameOrChainId = BigInt(nameOrChainId); }\r\n        const existing = Networks.get(nameOrChainId);\r\n        if (existing) {\r\n            assertArgument(false, `conflicting network for ${ JSON.stringify(existing.name) }`, \"nameOrChainId\", nameOrChainId);\r\n        }\r\n        Networks.set(nameOrChainId, networkFunc);\r\n    }\r\n}\r\n\r\n\r\ntype Options = {\r\n    ensNetwork?: number;\r\n    altNames?: Array<string>;\r\n    plugins?: Array<NetworkPlugin>;\r\n};\r\n\r\n// We don't want to bring in formatUnits because it is backed by\r\n// FixedNumber and we want to keep Networks tiny. The values\r\n// included by the Gas Stations are also IEEE 754 with lots of\r\n// rounding issues and exceed the strict checks formatUnits has.\r\nfunction parseUnits(_value: number | string, decimals: number): bigint {\r\n    const value = String(_value);\r\n    if (!value.match(/^[0-9.]+$/)) {\r\n        throw new Error(`invalid gwei value: ${ _value }`);\r\n    }\r\n\r\n    // Break into [ whole, fraction ]\r\n    const comps = value.split(\".\");\r\n    if (comps.length === 1) { comps.push(\"\"); }\r\n\r\n    // More than 1 decimal point or too many fractional positions\r\n    if (comps.length !== 2) {\r\n        throw new Error(`invalid gwei value: ${ _value }`);\r\n    }\r\n\r\n    // Pad the fraction to 9 decimalplaces\r\n    while (comps[1].length < decimals) { comps[1] += \"0\"; }\r\n\r\n    // Too many decimals and some non-zero ending, take the ceiling\r\n    if (comps[1].length > 9) {\r\n        let frac = BigInt(comps[1].substring(0, 9));\r\n        if (!comps[1].substring(9).match(/^0+$/)) { frac++; }\r\n        comps[1] = frac.toString();\r\n    }\r\n\r\n    return BigInt(comps[0] + comps[1]);\r\n}\r\n\r\n// Used by Polygon to use a gas station for fee data\r\nfunction getGasStationPlugin(url: string) {\r\n    return new FetchUrlFeeDataNetworkPlugin(url, async (fetchFeeData, provider, request) => {\r\n\r\n        // Prevent Cloudflare from blocking our request in node.js\r\n        request.setHeader(\"User-Agent\", \"ethers\");\r\n\r\n        let response;\r\n        try {\r\n            const [ _response, _feeData ] = await Promise.all([\r\n                request.send(), fetchFeeData()\r\n            ]);\r\n            response = _response;\r\n            const payload = response.bodyJson.standard;\r\n            const feeData = {\r\n                gasPrice: _feeData.gasPrice,\r\n                maxFeePerGas: parseUnits(payload.maxFee, 9),\r\n                maxPriorityFeePerGas: parseUnits(payload.maxPriorityFee, 9),\r\n            };\r\n            return feeData;\r\n        } catch (error: any) {\r\n            assert(false, `error encountered with polygon gas station (${ JSON.stringify(request.url) })`, \"SERVER_ERROR\", { request, response, error });\r\n        }\r\n    });\r\n}\r\n\r\n// See: https://chainlist.org\r\nlet injected = false;\r\nfunction injectCommonNetworks(): void {\r\n    if (injected) { return; }\r\n    injected = true;\r\n\r\n    /// Register popular Ethereum networks\r\n    function registerEth(name: string, chainId: number, options: Options): void {\r\n        const func = function() {\r\n            const network = new Network(name, chainId);\r\n\r\n            // We use 0 to disable ENS\r\n            if (options.ensNetwork != null) {\r\n                network.attachPlugin(new EnsPlugin(null, options.ensNetwork));\r\n            }\r\n\r\n            network.attachPlugin(new GasCostPlugin());\r\n\r\n            (options.plugins || []).forEach((plugin) => {\r\n                network.attachPlugin(plugin);\r\n            });\r\n\r\n            return network;\r\n        };\r\n\r\n        // Register the network by name and chain ID\r\n        Network.register(name, func);\r\n        Network.register(chainId, func);\r\n\r\n        if (options.altNames) {\r\n            options.altNames.forEach((name) => {\r\n                Network.register(name, func);\r\n            });\r\n        }\r\n    }\r\n\r\n    registerEth(\"mainnet\", 1, { ensNetwork: 1, altNames: [ \"homestead\" ] });\r\n    registerEth(\"ropsten\", 3, { ensNetwork: 3 });\r\n    registerEth(\"rinkeby\", 4, { ensNetwork: 4 });\r\n    registerEth(\"goerli\", 5, { ensNetwork: 5 });\r\n    registerEth(\"kovan\", 42, { ensNetwork: 42 });\r\n    registerEth(\"sepolia\", 11155111, { ensNetwork: 11155111 });\r\n    registerEth(\"holesky\", 17000, { ensNetwork: 17000 });\r\n\r\n    registerEth(\"classic\", 61, { });\r\n    registerEth(\"classicKotti\", 6, { });\r\n\r\n    registerEth(\"arbitrum\", 42161, {\r\n        ensNetwork: 1,\r\n    });\r\n    registerEth(\"arbitrum-goerli\", 421613, { });\r\n    registerEth(\"arbitrum-sepolia\", 421614, { });\r\n\r\n    registerEth(\"base\", 8453, { ensNetwork: 1 });\r\n    registerEth(\"base-goerli\", 84531, { });\r\n    registerEth(\"base-sepolia\", 84532, { });\r\n\r\n    registerEth(\"bnb\", 56, { ensNetwork: 1 });\r\n    registerEth(\"bnbt\", 97, { });\r\n\r\n    registerEth(\"linea\", 59144, { ensNetwork: 1 });\r\n    registerEth(\"linea-goerli\", 59140, { });\r\n    registerEth(\"linea-sepolia\", 59141, { });\r\n\r\n    registerEth(\"matic\", 137, {\r\n        ensNetwork: 1,\r\n        plugins: [\r\n            getGasStationPlugin(\"https:/\\/gasstation.polygon.technology/v2\")\r\n        ]\r\n    });\r\n    registerEth(\"matic-amoy\", 80002, { });\r\n    registerEth(\"matic-mumbai\", 80001, {\r\n        altNames: [ \"maticMumbai\", \"maticmum\" ],  // @TODO: Future remove these alts\r\n        plugins: [\r\n            getGasStationPlugin(\"https:/\\/gasstation-testnet.polygon.technology/v2\")\r\n        ]\r\n    });\r\n\r\n    registerEth(\"optimism\", 10, {\r\n        ensNetwork: 1,\r\n        plugins: [ ]\r\n    });\r\n    registerEth(\"optimism-goerli\", 420, { });\r\n    registerEth(\"optimism-sepolia\", 11155420, { });\r\n\r\n    registerEth(\"xdai\", 100, { ensNetwork: 1 });\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}