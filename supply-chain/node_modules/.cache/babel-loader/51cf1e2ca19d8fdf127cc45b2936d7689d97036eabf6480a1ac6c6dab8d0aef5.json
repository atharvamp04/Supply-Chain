{"ast":null,"code":"/**\r\n *  [[link-infura]] provides a third-party service for connecting to\r\n *  various blockchains over JSON-RPC.\r\n *\r\n *  **Supported Networks**\r\n *\r\n *  - Ethereum Mainnet (``mainnet``)\r\n *  - Goerli Testnet (``goerli``)\r\n *  - Sepolia Testnet (``sepolia``)\r\n *  - Arbitrum (``arbitrum``)\r\n *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)\r\n *  - Arbitrum Sepolia Testnet (``arbitrum-sepolia``)\r\n *  - Base (``base``)\r\n *  - Base Goerlia Testnet (``base-goerli``)\r\n *  - Base Sepolia Testnet (``base-sepolia``)\r\n *  - BNB Smart Chain Mainnet (``bnb``)\r\n *  - BNB Smart Chain Testnet (``bnbt``)\r\n *  - Linea (``linea``)\r\n *  - Linea Goerli Testnet (``linea-goerli``)\r\n *  - Linea Sepolia Testnet (``linea-sepolia``)\r\n *  - Optimism (``optimism``)\r\n *  - Optimism Goerli Testnet (``optimism-goerli``)\r\n *  - Optimism Sepolia Testnet (``optimism-sepolia``)\r\n *  - Polygon (``matic``)\r\n *  - Polygon Amoy Testnet (``matic-amoy``)\r\n *  - Polygon Mumbai Testnet (``matic-mumbai``)\r\n *\r\n *  @_subsection: api/providers/thirdparty:INFURA  [providers-infura]\r\n */\nimport { defineProperties, FetchRequest, assert, assertArgument } from \"../utils/index.js\";\nimport { showThrottleMessage } from \"./community.js\";\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\nimport { WebSocketProvider } from \"./provider-websocket.js\";\nconst defaultProjectId = \"84842078b09946638c03157f83405213\";\nfunction getHost(name) {\n  switch (name) {\n    case \"mainnet\":\n      return \"mainnet.infura.io\";\n    case \"goerli\":\n      return \"goerli.infura.io\";\n    case \"sepolia\":\n      return \"sepolia.infura.io\";\n    case \"arbitrum\":\n      return \"arbitrum-mainnet.infura.io\";\n    case \"arbitrum-goerli\":\n      return \"arbitrum-goerli.infura.io\";\n    case \"arbitrum-sepolia\":\n      return \"arbitrum-sepolia.infura.io\";\n    case \"base\":\n      return \"base-mainnet.infura.io\";\n    case \"base-goerlia\":\n      return \"base-goerli.infura.io\";\n    case \"base-sepolia\":\n      return \"base-sepolia.infura.io\";\n    case \"bnb\":\n      return \"bnbsmartchain-mainnet.infura.io\";\n    case \"bnbt\":\n      return \"bnbsmartchain-testnet.infura.io\";\n    case \"linea\":\n      return \"linea-mainnet.infura.io\";\n    case \"linea-goerli\":\n      return \"linea-goerli.infura.io\";\n    case \"linea-sepolia\":\n      return \"linea-sepolia.infura.io\";\n    case \"matic\":\n      return \"polygon-mainnet.infura.io\";\n    case \"matic-amoy\":\n      return \"polygon-amoy.infura.io\";\n    case \"matic-mumbai\":\n      return \"polygon-mumbai.infura.io\";\n    case \"optimism\":\n      return \"optimism-mainnet.infura.io\";\n    case \"optimism-goerli\":\n      return \"optimism-goerli.infura.io\";\n    case \"optimism-sepolia\":\n      return \"optimism-sepolia.infura.io\";\n  }\n  assertArgument(false, \"unsupported network\", \"network\", name);\n}\n/**\r\n *  The **InfuraWebSocketProvider** connects to the [[link-infura]]\r\n *  WebSocket end-points.\r\n *\r\n *  By default, a highly-throttled API key is used, which is\r\n *  appropriate for quick prototypes and simple scripts. To\r\n *  gain access to an increased rate-limit, it is highly\r\n *  recommended to [sign up here](link-infura-signup).\r\n */\nexport class InfuraWebSocketProvider extends WebSocketProvider {\n  /**\r\n   *  The Project ID for the INFURA connection.\r\n   */\n  projectId;\n  /**\r\n   *  The Project Secret.\r\n   *\r\n   *  If null, no authenticated requests are made. This should not\r\n   *  be used outside of private contexts.\r\n   */\n  projectSecret;\n  /**\r\n   *  Creates a new **InfuraWebSocketProvider**.\r\n   */\n  constructor(network, projectId) {\n    const provider = new InfuraProvider(network, projectId);\n    const req = provider._getConnection();\n    assert(!req.credentials, \"INFURA WebSocket project secrets unsupported\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"InfuraProvider.getWebSocketProvider()\"\n    });\n    const url = req.url.replace(/^http/i, \"ws\").replace(\"/v3/\", \"/ws/v3/\");\n    super(url, provider._network);\n    defineProperties(this, {\n      projectId: provider.projectId,\n      projectSecret: provider.projectSecret\n    });\n  }\n  isCommunityResource() {\n    return this.projectId === defaultProjectId;\n  }\n}\n/**\r\n *  The **InfuraProvider** connects to the [[link-infura]]\r\n *  JSON-RPC end-points.\r\n *\r\n *  By default, a highly-throttled API key is used, which is\r\n *  appropriate for quick prototypes and simple scripts. To\r\n *  gain access to an increased rate-limit, it is highly\r\n *  recommended to [sign up here](link-infura-signup).\r\n */\nexport class InfuraProvider extends JsonRpcProvider {\n  /**\r\n   *  The Project ID for the INFURA connection.\r\n   */\n  projectId;\n  /**\r\n   *  The Project Secret.\r\n   *\r\n   *  If null, no authenticated requests are made. This should not\r\n   *  be used outside of private contexts.\r\n   */\n  projectSecret;\n  /**\r\n   *  Creates a new **InfuraProvider**.\r\n   */\n  constructor(_network, projectId, projectSecret) {\n    if (_network == null) {\n      _network = \"mainnet\";\n    }\n    const network = Network.from(_network);\n    if (projectId == null) {\n      projectId = defaultProjectId;\n    }\n    if (projectSecret == null) {\n      projectSecret = null;\n    }\n    const request = InfuraProvider.getRequest(network, projectId, projectSecret);\n    super(request, network, {\n      staticNetwork: network\n    });\n    defineProperties(this, {\n      projectId,\n      projectSecret\n    });\n  }\n  _getProvider(chainId) {\n    try {\n      return new InfuraProvider(chainId, this.projectId, this.projectSecret);\n    } catch (error) {}\n    return super._getProvider(chainId);\n  }\n  isCommunityResource() {\n    return this.projectId === defaultProjectId;\n  }\n  /**\r\n   *  Creates a new **InfuraWebSocketProvider**.\r\n   */\n  static getWebSocketProvider(network, projectId) {\n    return new InfuraWebSocketProvider(network, projectId);\n  }\n  /**\r\n   *  Returns a prepared request for connecting to %%network%%\r\n   *  with %%projectId%% and %%projectSecret%%.\r\n   */\n  static getRequest(network, projectId, projectSecret) {\n    if (projectId == null) {\n      projectId = defaultProjectId;\n    }\n    if (projectSecret == null) {\n      projectSecret = null;\n    }\n    const request = new FetchRequest(`https:/\\/${getHost(network.name)}/v3/${projectId}`);\n    request.allowGzip = true;\n    if (projectSecret) {\n      request.setCredentials(\"\", projectSecret);\n    }\n    if (projectId === defaultProjectId) {\n      request.retryFunc = async (request, response, attempt) => {\n        showThrottleMessage(\"InfuraProvider\");\n        return true;\n      };\n    }\n    return request;\n  }\n}","map":{"version":3,"names":["defineProperties","FetchRequest","assert","assertArgument","showThrottleMessage","Network","JsonRpcProvider","WebSocketProvider","defaultProjectId","getHost","name","InfuraWebSocketProvider","projectId","projectSecret","constructor","network","provider","InfuraProvider","req","_getConnection","credentials","operation","url","replace","_network","isCommunityResource","from","request","getRequest","staticNetwork","_getProvider","chainId","error","getWebSocketProvider","allowGzip","setCredentials","retryFunc","response","attempt"],"sources":["C:\\Users\\patil\\OneDrive\\Desktop\\Hack4Good\\Supply-Chain\\supply-chain\\node_modules\\ethers\\src.ts\\providers\\provider-infura.ts"],"sourcesContent":["/**\r\n *  [[link-infura]] provides a third-party service for connecting to\r\n *  various blockchains over JSON-RPC.\r\n *\r\n *  **Supported Networks**\r\n *\r\n *  - Ethereum Mainnet (``mainnet``)\r\n *  - Goerli Testnet (``goerli``)\r\n *  - Sepolia Testnet (``sepolia``)\r\n *  - Arbitrum (``arbitrum``)\r\n *  - Arbitrum Goerli Testnet (``arbitrum-goerli``)\r\n *  - Arbitrum Sepolia Testnet (``arbitrum-sepolia``)\r\n *  - Base (``base``)\r\n *  - Base Goerlia Testnet (``base-goerli``)\r\n *  - Base Sepolia Testnet (``base-sepolia``)\r\n *  - BNB Smart Chain Mainnet (``bnb``)\r\n *  - BNB Smart Chain Testnet (``bnbt``)\r\n *  - Linea (``linea``)\r\n *  - Linea Goerli Testnet (``linea-goerli``)\r\n *  - Linea Sepolia Testnet (``linea-sepolia``)\r\n *  - Optimism (``optimism``)\r\n *  - Optimism Goerli Testnet (``optimism-goerli``)\r\n *  - Optimism Sepolia Testnet (``optimism-sepolia``)\r\n *  - Polygon (``matic``)\r\n *  - Polygon Amoy Testnet (``matic-amoy``)\r\n *  - Polygon Mumbai Testnet (``matic-mumbai``)\r\n *\r\n *  @_subsection: api/providers/thirdparty:INFURA  [providers-infura]\r\n */\r\nimport {\r\n    defineProperties, FetchRequest, assert, assertArgument\r\n} from \"../utils/index.js\";\r\n\r\nimport { showThrottleMessage } from \"./community.js\";\r\nimport { Network } from \"./network.js\";\r\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\r\nimport { WebSocketProvider } from \"./provider-websocket.js\";\r\n\r\nimport type { AbstractProvider } from \"./abstract-provider.js\";\r\nimport type { CommunityResourcable } from \"./community.js\";\r\nimport type { Networkish } from \"./network.js\";\r\n\r\n\r\nconst defaultProjectId = \"84842078b09946638c03157f83405213\";\r\n\r\nfunction getHost(name: string): string {\r\n    switch(name) {\r\n        case \"mainnet\":\r\n            return \"mainnet.infura.io\";\r\n        case \"goerli\":\r\n            return \"goerli.infura.io\";\r\n        case \"sepolia\":\r\n            return \"sepolia.infura.io\";\r\n\r\n        case \"arbitrum\":\r\n            return \"arbitrum-mainnet.infura.io\";\r\n        case \"arbitrum-goerli\":\r\n            return \"arbitrum-goerli.infura.io\";\r\n        case \"arbitrum-sepolia\":\r\n            return \"arbitrum-sepolia.infura.io\";\r\n        case \"base\":\r\n            return \"base-mainnet.infura.io\";\r\n        case \"base-goerlia\":\r\n            return \"base-goerli.infura.io\";\r\n        case \"base-sepolia\":\r\n            return \"base-sepolia.infura.io\";\r\n        case \"bnb\":\r\n            return \"bnbsmartchain-mainnet.infura.io\";\r\n        case \"bnbt\":\r\n            return \"bnbsmartchain-testnet.infura.io\";\r\n        case \"linea\":\r\n            return \"linea-mainnet.infura.io\";\r\n        case \"linea-goerli\":\r\n            return \"linea-goerli.infura.io\";\r\n        case \"linea-sepolia\":\r\n            return \"linea-sepolia.infura.io\";\r\n        case \"matic\":\r\n            return \"polygon-mainnet.infura.io\";\r\n        case \"matic-amoy\":\r\n            return \"polygon-amoy.infura.io\";\r\n        case \"matic-mumbai\":\r\n            return \"polygon-mumbai.infura.io\";\r\n        case \"optimism\":\r\n            return \"optimism-mainnet.infura.io\";\r\n        case \"optimism-goerli\":\r\n            return \"optimism-goerli.infura.io\";\r\n        case \"optimism-sepolia\":\r\n            return \"optimism-sepolia.infura.io\";\r\n    }\r\n\r\n    assertArgument(false, \"unsupported network\", \"network\", name);\r\n}\r\n\r\n/**\r\n *  The **InfuraWebSocketProvider** connects to the [[link-infura]]\r\n *  WebSocket end-points.\r\n *\r\n *  By default, a highly-throttled API key is used, which is\r\n *  appropriate for quick prototypes and simple scripts. To\r\n *  gain access to an increased rate-limit, it is highly\r\n *  recommended to [sign up here](link-infura-signup).\r\n */\r\nexport class InfuraWebSocketProvider extends WebSocketProvider implements CommunityResourcable {\r\n\r\n    /**\r\n     *  The Project ID for the INFURA connection.\r\n     */\r\n    readonly projectId!: string;\r\n\r\n    /**\r\n     *  The Project Secret.\r\n     *\r\n     *  If null, no authenticated requests are made. This should not\r\n     *  be used outside of private contexts.\r\n     */\r\n    readonly projectSecret!: null | string;\r\n\r\n    /**\r\n     *  Creates a new **InfuraWebSocketProvider**.\r\n     */\r\n    constructor(network?: Networkish, projectId?: string) {\r\n        const provider = new InfuraProvider(network, projectId);\r\n\r\n        const req = provider._getConnection();\r\n        assert(!req.credentials, \"INFURA WebSocket project secrets unsupported\",\r\n            \"UNSUPPORTED_OPERATION\", { operation: \"InfuraProvider.getWebSocketProvider()\" });\r\n\r\n        const url = req.url.replace(/^http/i, \"ws\").replace(\"/v3/\", \"/ws/v3/\");\r\n        super(url, provider._network);\r\n\r\n        defineProperties<InfuraWebSocketProvider>(this, {\r\n            projectId: provider.projectId,\r\n            projectSecret: provider.projectSecret\r\n        });\r\n    }\r\n\r\n    isCommunityResource(): boolean {\r\n        return (this.projectId === defaultProjectId);\r\n    }\r\n}\r\n\r\n/**\r\n *  The **InfuraProvider** connects to the [[link-infura]]\r\n *  JSON-RPC end-points.\r\n *\r\n *  By default, a highly-throttled API key is used, which is\r\n *  appropriate for quick prototypes and simple scripts. To\r\n *  gain access to an increased rate-limit, it is highly\r\n *  recommended to [sign up here](link-infura-signup).\r\n */\r\nexport class InfuraProvider extends JsonRpcProvider implements CommunityResourcable {\r\n    /**\r\n     *  The Project ID for the INFURA connection.\r\n     */\r\n    readonly projectId!: string;\r\n\r\n    /**\r\n     *  The Project Secret.\r\n     *\r\n     *  If null, no authenticated requests are made. This should not\r\n     *  be used outside of private contexts.\r\n     */\r\n    readonly projectSecret!: null | string;\r\n\r\n    /**\r\n     *  Creates a new **InfuraProvider**.\r\n     */\r\n    constructor(_network?: Networkish, projectId?: null | string, projectSecret?: null | string) {\r\n        if (_network == null) { _network = \"mainnet\"; }\r\n        const network = Network.from(_network);\r\n        if (projectId == null) { projectId = defaultProjectId; }\r\n        if (projectSecret == null) { projectSecret = null; }\r\n\r\n        const request = InfuraProvider.getRequest(network, projectId, projectSecret);\r\n        super(request, network, { staticNetwork: network });\r\n\r\n        defineProperties<InfuraProvider>(this, { projectId, projectSecret });\r\n    }\r\n\r\n    _getProvider(chainId: number): AbstractProvider {\r\n        try {\r\n            return new InfuraProvider(chainId, this.projectId, this.projectSecret);\r\n        } catch (error) { }\r\n        return super._getProvider(chainId);\r\n    }\r\n\r\n    isCommunityResource(): boolean {\r\n        return (this.projectId === defaultProjectId);\r\n    }\r\n\r\n    /**\r\n     *  Creates a new **InfuraWebSocketProvider**.\r\n     */\r\n    static getWebSocketProvider(network?: Networkish, projectId?: string): InfuraWebSocketProvider {\r\n        return new InfuraWebSocketProvider(network, projectId);\r\n    }\r\n\r\n    /**\r\n     *  Returns a prepared request for connecting to %%network%%\r\n     *  with %%projectId%% and %%projectSecret%%.\r\n     */\r\n    static getRequest(network: Network, projectId?: null | string, projectSecret?: null | string): FetchRequest {\r\n        if (projectId == null) { projectId = defaultProjectId; }\r\n        if (projectSecret == null) { projectSecret = null; }\r\n\r\n        const request = new FetchRequest(`https:/\\/${ getHost(network.name) }/v3/${ projectId }`);\r\n        request.allowGzip = true;\r\n        if (projectSecret) { request.setCredentials(\"\", projectSecret); }\r\n\r\n        if (projectId === defaultProjectId) {\r\n            request.retryFunc = async (request, response, attempt) => {\r\n                showThrottleMessage(\"InfuraProvider\");\r\n                return true;\r\n            };\r\n        }\r\n\r\n        return request;\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}